prototype(Jonnitto.Plyr:Javascript) < prototype(Neos.Fusion:Join) {
    configuration = ${Configuration.setting('Jonnitto.Plyr')}
    @context.configuration = ${this.configuration}
    @ignoreProperties = ${['configuration']}

    library = Carbon.IncludeAssets:File {
        file = ${configuration.include.javascript.file}
        assetPackage = ${configuration.include.javascript.assetPackage}
        assetPath = ${configuration.include.javascript.assetPath}
        @if.render = ${node.context.live}
    }

    call = Neos.Fusion:Tag {
        tagName = 'script'
        content = Neos.Fusion:Join {
            options = Neos.Fusion:Template {
                templatePath = 'resource://Jonnitto.Plyr/Private/Templates/Javascript.js'

                i18n = Neos.Fusion:Loop {
                    items = ${['restart','rewind','play','pause','fastForward','seek','seekLabel','played','buffered','currentTime','duration','volume','mute','unmute','enableCaptions','disableCaptions','enterFullscreen','exitFullscreen','frameTitle','captions','settings','menuBack','speed','normal','quality','loop','start','end','all','reset','disabled','enabled','advertisement','qualityBadge']}
                    itemRenderer = Neos.Fusion:Value {
                        englishDefault = ${Translation.translate(item, null, [], 'Main', 'Jonnitto.Plyr', null, 'en')}
                        translation = ${Translation.translate(item, this.englishDefault, [], 'Main', 'Jonnitto.Plyr')}
                        wrappedTranslation = ${item == 'qualityBadge' ? this.translation : ("'" + this.translation + "'")}
                        value = ${item + ":" + this.wrappedTranslation + (iterator.isLast ? '' : ',')}
                    }
                    @process.wrap = ${'i18n:{' + value + '}'}
                }

                options = ${configuration.options}
                clickToPlay = ${this.options.clickToPlay && node.context.live}

                // quality:
                //     default: 576
                //     options: [4320, 2880, 2160, 1440, 1080, 720, 576, 480, 360, 240]

                quality = ${[]}
                quality.@process {
                    setDefault = ${configuration.options.quality.default != 576 ? Array.push(value, "default:'" + configuration.options.quality.default + "'") : value}
                    setOptions = ${configuration.options.quality.options != [4320, 2880, 2160, 1440, 1080, 720, 576, 480, 360, 240] ? Array.push(value, "options:['" + Array.join(configuration.options.controls, "','") + "']") : value}
                    wrap = ${Array.isEmpty(value) ? false : '{' + Array.join(value, ',') + '}'}
                }

                // speed:
                //     selected: 1
                //     options: [0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]
                speed = ${[]}
                speed.@process {
                    setSelected = ${configuration.options.speed.selected != 1 ? Array.push(value, 'selected:' + configuration.options.speed.selected) : value}
                    setOptions = ${configuration.options.speed.options != [0.5, 0.75, 1, 1.25, 1.5, 1.75, 2] ? Array.push(value, 'options:[' + Array.join(configuration.options.speed.options, ',') + ']') : value}
                    wrap = ${Array.isEmpty(value) ? false : '{' + Array.join(value, ',') + '}'}
                }

                // keyboard:
                //    focused: true
                //    global: false
                keyboard = ${[]}
                keyboard.@process {
                    setFocused = ${!configuration.options.keyboard.focused ? Array.push(value, 'focused:false') : value}
                    setGlobal = ${configuration.options.keyboard.global ? Array.push(value, 'global:true') : value}
                    wrap = ${Array.isEmpty(value) ? false : '{' + Array.join(value, ',') + '}'}
                }

                // tooltips:
                //    controls: false
                //    seek: true
                tooltips = ${[]}
                tooltips.@process {
                    setControls = ${configuration.options.tooltips.controls ? Array.push(value, 'controls:true') : value}
                    setSeek = ${!configuration.options.tooltips.seek ? Array.push(value, 'seek:false') : value}
                    wrap = ${Array.isEmpty(value) ? false : '{' + Array.join(value, ',') + '}'}
                }

                // captions:
                //    active: false
                //    language: 'auto'
                //    update: false
                captions = ${[]}
                captions.@process {
                    setActive = ${configuration.options.captions.active ? Array.push(value, 'active:true') : value}
                    setLanguage = ${configuration.options.captions.language != 'auto' ? Array.push(value, 'language:' + configuration.options.captions.language) : value}
                    setUpdate = ${configuration.options.captions.update ? Array.push(value, 'update:true') : value}
                    wrap = ${Array.isEmpty(value) ? false : '{' + Array.join(value, ',') + '}'}
                }

                // fullscreen:
                //    enabled: true
                //    fallback: true
                //    iosNative: false
                fullscreen = ${[]}
                fullscreen.@process {
                    setEnabled = ${!configuration.options.fullscreen.enabled ? Array.push(value, 'enabled:false') : value}
                    setFallback = ${!configuration.options.fullscreen.fallback ? Array.push(value, 'fallback:false') : value}
                    setIosNative = ${configuration.options.fullscreen.iosNative ? Array.push(value, 'iosNative:true') : value}
                    wrap = ${Array.isEmpty(value) ? false : '{' + Array.join(value, ',') + '}'}
                }

                // storage:
                //     enabled: true
                //     key: 'plyr'
                storage = ${[]}
                storage.@process {
                    setEnabled = ${!configuration.options.storage.enabled ? Array.push(value, 'enabled:false') : value}
                    setKey = ${configuration.options.storage.key != 'plyr' ? Array.push(value, "key:'" + configuration.options.storage.key + "'") : value}
                    wrap = ${Array.isEmpty(value) ? false : '{' + Array.join(value, ',') + '}'}
                }

                // controls:
                //     - play-large
                //     - play
                //     - progress
                //     - current-time
                //     - mute
                //     - volume
                //     - captions
                //     - settings
                //     - pip
                //     - airplay
                //     - fullscreen
                controls = Neos.Fusion:Case {
                    isDefault {
                        condition = ${configuration.options.controls == ['play-large', 'play', 'progress', 'current-time', 'mute', 'volume', 'captions', 'settings', 'pip', 'airplay', 'fullscreen'] ? true : false}
                        renderer = false
                    }
                    default {
                        condition = true
                        renderer = ${"['" + Array.join(configuration.options.controls, "','") + "']"}
                    }
                }

                // settings:
                //      - captions
                //      - quality
                //      - speed
                settings = Neos.Fusion:Case {
                    isDefault {
                        condition = ${configuration.options.settings == ['captions', 'quality', 'speed'] ? true : false}
                        renderer = false
                    }
                    default {
                        condition = true
                        renderer = ${"['" + Array.join(configuration.options.settings, "','") + "']"}
                    }
                }

                // listeners:
                //    seek: null
                //    play: null
                //    pause: null
                //    restart: null
                //    rewind: null
                //    fastForward: null
                //    mute: null
                //    volume: null
                //    captions: null
                //    fullscreen: null
                //    pip: null
                //    airplay: null
                //    speed: null
                //    quality: null
                //    loop: null
                //    language: null
                listeners = ${[]}
                listeners.@process {
                    setSeek = ${configuration.options.listeners.seek ? Array.push(value, 'seek:' + configuration.options.listeners.seek) : value}
                    setPlay = ${configuration.options.listeners.play ? Array.push(value, 'play:' + configuration.options.listeners.play) : value}
                    setPause = ${configuration.options.listeners.pause ? Array.push(value, 'pause:' + configuration.options.listeners.pause) : value}
                    setRestart = ${configuration.options.listeners.restart ? Array.push(value, 'restart:' + configuration.options.listeners.restart) : value}
                    setRewind = ${configuration.options.listeners.rewind ? Array.push(value, 'rewind:' + configuration.options.listeners.rewind) : value}
                    setFastForward = ${configuration.options.listeners.fastForward ? Array.push(value, 'fastForward:' + configuration.options.listeners.fastForward) : value}
                    setMute = ${configuration.options.listeners.mute ? Array.push(value, 'mute:' + configuration.options.listeners.mute) : value}
                    setVolume = ${configuration.options.listeners.volume ? Array.push(value, 'volume:' + configuration.options.listeners.volume) : value}
                    setCaptions = ${configuration.options.listeners.captions ? Array.push(value, 'captions:' + configuration.options.listeners.captions) : value}
                    setFullscreen = ${configuration.options.listeners.fullscreen ? Array.push(value, 'fullscreen:' + configuration.options.listeners.fullscreen) : value}
                    setPip = ${configuration.options.listeners.pip ? Array.push(value, 'pip:' + configuration.options.listeners.pip) : value}
                    setAirplay = ${configuration.options.listeners.airplay ? Array.push(value, 'airplay:' + configuration.options.listeners.airplay) : value}
                    setSpeed = ${configuration.options.listeners.speed ? Array.push(value, 'speed:' + configuration.options.listeners.speed) : value}
                    setQuality = ${configuration.options.listeners.quality ? Array.push(value, 'quality:' + configuration.options.listeners.quality) : value}
                    setLoop = ${configuration.options.listeners.loop ? Array.push(value, 'loop:' + configuration.options.listeners.loop) : value}
                    setLanguage = ${configuration.options.listeners.language ? Array.push(value, 'language:' + configuration.options.listeners.language) : value}
                    wrap = ${Array.isEmpty(value) ? false : '{' + Array.join(value, ',') + '}'}
                }

                // keys:
                //    google: null
                keys = ${[]}
                keys.@process {
                    setGoogle = ${configuration.options.keys.google ? Array.push(value, 'google:"' + configuration.options.keys.google + '"') : value}
                    wrap = ${Array.isEmpty(value) ? false : '{' + Array.join(value, ',') + '}'}
                }

                // ads:
                //     enabled: false
                //     publisherId: ''
                ads = ${[]}
                ads.@process {
                    setEnabled = ${configuration.options.ads.enabled ? Array.push(value, 'enabled:true') : value}
                    setPublisherId = ${configuration.options.ads.publisherId ? Array.push(value, "publisherId:'" + configuration.options.ads.publisherId + "'") : value}
                    wrap = ${Array.isEmpty(value) ? false : '{' + Array.join(value, ',') + '}'}
                }

                // youtube:
                //     noCookie: false
                //     rel: null
                //     showinfo: null
                //     iv_load_policy: null
                //     modestbranding: null
                youtube = ${[]}
                youtube.@process {
                    setNoCookie = ${configuration.options.youtube.noCookie ? Array.push(value, 'noCookie:true') : value}
                    setRel = ${configuration.options.youtube.rel ? Array.push(value, "rel:'" + configuration.options.youtube.rel + "'") : value}
                    setShowinfo = ${configuration.options.youtube.showinfo ? Array.push(value, "showinfo:'" + configuration.options.youtube.showinfo + "'") : value}
                    setIvLoadPolicy = ${configuration.options.youtube.ivLoadPolicy ? Array.push(value, "iv_load_policy:'" + configuration.options.youtube.ivLoadPolicy + "'") : value}
                    setModestbranding = ${configuration.options.youtube.modestbranding ? Array.push(value, "modestbranding:'" + configuration.options.youtube.modestbranding + "'") : value}
                    wrap = ${Array.isEmpty(value) ? false : '{' + Array.join(value, ',') + '}'}
                }

                @process.clean = ${String.pregReplace(String.pregReplace(String.pregReplace(String.pregReplace(String.pregReplace(value, '/\/\/ jshint ignore:start\n/', ''), '/[\s]+/', ' '), '/[\s]+({|}|=|\+|;)[\s]+/', '$1'), '/(\',|;)[\s]+/', '$1'), '/;}/', '}')}
            }
            backend = ${node.context.inBackend ? Carbon.FileContent.path('Jonnitto.Plyr/Private/Templates/Backend.js') : ''}
        }
    }
}
