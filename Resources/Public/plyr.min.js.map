{"version":3,"sources":["support.js","../../node_modules/loadjs/dist/loadjs.umd.js","storage.js","types.js","utils.js","html5.js","i18n.js","controls.js","captions.js","console.js","defaults.js","fullscreen.js","ui.js","listeners.js","plugins/vimeo.js","plugins/youtube.js","media.js","plugins/ads.js","source.js","plyr.js"],"names":["range","factory","devnull","bundleIdCache","bundleResultCache","bundleCallbackQueue","publish","bundleId","pathsNotFound","q","length","splice","executeCallbacks","args","depsNotFound","call","success","error","loadFile","path","callbackFn","numTries","isCss","e","doc","document","async","maxTries","numRetries","beforeCallbackFn","before","pathStripped","replace","test","createElement","rel","href","src","undefined","onload","onerror","onbeforeload","ev","result","type","sheet","cssText","x","defaultPrevented","head","appendChild","loadjs","paths","arg1","arg2","trim","fn","i","numWaiting","push","loadFiles","ready","deps","bundleIds","r","subscribe","done","reset","isDefined","module","exports","Storage","player","enabled","config","storage","key","supported","this","store","window","localStorage","getItem","utils","is","empty","json","JSON","parse","string","object","get","extend","setItem","stringify","removeItem","providers","types","input","getConstructor","Object","Number","isNaN","String","Boolean","Function","nullOrUndefined","Array","isArray","instanceof","WeakMap","NodeList","Element","Text","Event","TextTrackCue","VTTCue","TextTrack","kind","array","nodeList","keys","constructor","documentMode","documentElement","style","navigator","userAgent","platform","url","responseType","arguments","Promise","resolve","reject","request","XMLHttpRequest","addEventListener","responseText","response","Error","statusText","open","send","minWidth","image","Image","handler","naturalWidth","assign","id","hasId","exists","getElementById","update","container","data","innerHTML","body","insertAdjacentElement","useStorage","toggleHidden","setAttribute","cached","prefix","content","fetch","then","catch","Math","floor","random","elements","wrapper","targets","from","reverse","forEach","element","index","child","cloneNode","parent","parentNode","sibling","nextSibling","insertBefore","attributes","text","setAttributes","innerText","target","removeElement","removeChild","childNodes","lastChild","newChild","oldChild","replaceChild","entries","_ref","_ref2","value","sel","existingAttributes","existing","split","s","selector","className","parts","charAt","class","hidden","hide","boolean","hasAttribute","removeAttribute","force","method","classList","contains","prototype","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","querySelectorAll","includes","querySelector","focused","activeElement","toggle","focusable","getElements","first","last","trap","event","keyCode","getFocusElement","shiftKey","focus","preventDefault","on","off","callback","passive","capture","function","Node","toggleListener","events","options","support","passiveListeners","bubbles","detail","CustomEvent","dispatchEvent","toggleState","pressed","getAttribute","state","_len","_key","toString","match","current","max","toFixed","parseInt","time","displayHours","inverted","number","formatTime","format","slice","hours","getHours","mins","getMinutes","secs","getSeconds","find","RegExp","toUpperCase","substr","toLowerCase","replaceAll","toTitleCase","toPascalCase","sources","_len2","_key2","source","shift","defineProperty","apply","concat","toConsumableArray","filter","item","indexOf","reduce","obj","prev","curr","abs","youtube","vimeo","$2","parser","search","startsWith","parseUrl","params","hash","_hash$split2","val","decodeURIComponent","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","width","height","ratio","getRatio","w","h","offsetHeight","provider","playsinline","api","ui","browser","getBrowser","canPlayInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","removeEventListener","transitionEndEvent","matchMedia","html5","getSources","sizes","dedupe","mime","currentTime","playing","onLoadedMetaData","load","play","blankVideo","debug","log","i18n","getDeep","seekTime","title","controls","cors","URL","iconUrl","location","host","isIE","svg4everybody","getElement","selectors","buttons","pause","restart","rewind","fastForward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","seekTooltip","classNames","tooltip","warn","toggleNativeControls","getIconUrl","iconPath","iconPrefix","icon","createElementNS","use","setAttributeNS","attr","badge","menu","buttonType","button","toCamelCase","label","labelPressed","iconPressed","control","createIcon","createLabel","getAttributesFromSelector","updateRangeFill","suffix","list","_ref$badge","checked","_ref$checked","radio","faux","insertAdjacentHTML","forceHours","setRange","muted","getPercentage","_this","getElementsByTagName","nodeValue","buffered","isWebkit","setProperty","tooltips","percent","clientRect","getBoundingClientRect","visible","_toggle","toggleClass","_this2","touch","pageX","left","hasClass","parseFloat","updateTimeDisplay","invert","invertTime","seeking","updateProgress","hasDuration","displayDuration","paused","updateSeekTooltip","setting","tabs","panes","quality","_this3","toggleTab","checkMenu","emptyElement","sort","a","b","sorting","createMenuItem","getLabel","createBadge","getBadge","updateSetting","pane","currentTrack","default","tracks","getTracks","track","_this4","active","language","unshift","bind","speed","isVimeo","_this5","values","some","tab","form","show","isMenuItem","isButton","stopPropagation","clone","position","opacity","name","scrollWidth","scrollHeight","transitions","reducedMotion","size","getTabSize","restore","propertyName","createButton","createRange","createProgress","createTime","inner","home","_this6","back","setQualityMenu","getQualityOptions","setSpeedMenu","loadSprite","props","create","_ref3","findElements","repaint","labels","_this7","isYouTube","textTracks","setCaptionsMenu","insertAfter","hostname","protocol","blob","createObjectURL","userLanguage","setLanguage","trackEvents","_captions","meta","set","mode","updateCues","trackRemoved","currentTrackNode","firstMatch","getCurrentTrack","embed","enableTextTrack","toggleCaptions","has","fromLanguage","sortIsDefault","sorted","cues","activeCues","cue","getCueAsHTML","getHTML","cueText","caption","noop","Console","console","defaults","onChange","isIos","trapFocus","toggleFallback","scrollPosition","scrollX","scrollY","scrollTo","y","overflow","fallback","Fullscreen","property","native","iosNative","webkitEnterFullscreen","requestFullscreen","webkitExitFullscreen","action","cancelFullScreen","exitFullscreen","exit","enter","fullscreenElement","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","pre","uiSupported","listeners","inject","setup","loop","updateVolume","timeUpdate","checkPlaying","isTouch","setTitle","poster","backgroundImage","setPoster","durationUpdate","isEmbed","iframe","enable","posterEnabled","loadPromise","loadImage","togglePoster","stopped","toggleControls","loading","timers","setTimeout","hideControls","hover","Listeners","lastKey","handleKey","toggleMenu","firstTouch","code","which","repeat","altKey","ctrlKey","metaKey","editable","togglePlay","increaseVolume","decreaseVolume","forward","keyboard","global","tabFocus","delay","hasAudio","resetOnEnd","checkLoading","ads","initialized","managerPromise","clickToPlay","ended","disableContextMenu","_event$detail","inputEvent","proxy","defaultHandler","customHandlerKey","customHandler","returned","hasCustomHandler","showHomeTab","showTab","currentTarget","eventType","seekTo","toggleInvert","_player","noTransition","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","assurePlaybackState","hasPlayed","setAspectRatio","Vimeo","loadScript","urls","sdk","padding","paddingBottom","offset","transform","autoplay","buildUrlParams","parseVimeoId","embedContainer","replaceElement","thumbnail_large","pathname","Player","autopause","disableTextTrack","stop","restorePause","setVolume","setCurrentTime","selected","setPlaybackRate","setLoop","currentSrc","getVideoUrl","all","getVideoWidth","getVideoHeight","dimensions","getAspectRatio","setAutopause","getVideoTitle","getCurrentTime","getDuration","getTextTracks","strippedCues","_ref$cues","stripHTML","getPaused","seconds","build","mapQualityUnit","YT","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","videoId","getVideoData","google","items","snippet","currentId","parseYouTubeId","generateId","posterSrc","backgroundSize","message","instance","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stopVideo","getPlaybackQuality","setPlaybackQuality","getAvailablePlaybackRates","buffering","setInterval","getVideoLoadedFraction","lastBuffered","levels","getAvailableQualityLevels","level","unMute","wrap","Ads","publisherId","manager","loader","cuePoints","safetyTimer","countdownTimer","ima","googleIMA","trigger","startSafetyTimer","clearSafetyTimer","setupIMA","setVpaidMode","ImaSdkSettings","VpaidMode","ENABLED","setLocale","displayContainer","AdDisplayContainer","requestAds","AdsLoader","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","AdsRequest","adTagUrl","tagUrl","linearAdSlotWidth","offsetWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","forceNonLinearFullSlot","setAdWillPlayMuted","getRemainingTime","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","enablePreloading","getAdsManager","getCuePoints","cuePoint","seekElement","cuePercentage","AdEvent","onAdEvent","ad","getAd","LOADED","pollCountdown","isLinear","ALL_ADS_COMPLETED","loadAds","CONTENT_PAUSE_REQUESTED","pauseContent","CONTENT_RESUME_REQUESTED","resumeContent","STARTED","MIDPOINT","COMPLETE","IMPRESSION","CLICK","cancel","contentComplete","_this8","seekedTime","discardAdBreak","resize","ViewMode","NORMAL","initialize","_this9","init","start","adError","zIndex","_this10","destroy","handlers","_this11","Date","now","base","insertElement","attribute","cancelRequests","check","crossorigin","addStyleHook","insertElements","Plyr","failed","jQuery","plyr","original","tagName","getProviderByUrl","getUrlParams","truthy","step","webkitShowPlaybackTargetPicker","isHidden","hiding","eventName","soft","clear","unload","inputIsValid","min","end","fauxDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","closest","change","states","webkitPresentationMode","inline","t","cloneDeep"],"mappings":"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","file":"plyr.min.js","sourcesContent":["// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, playsinline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const canPlayInline = browser.isIPhone && playsinline && support.playsinline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || canPlayInline);\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    playsinline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Check directly if codecs specified\n            if (type.includes('codecs=')) {\n                return media.canPlayType(type).replace(/no/, '');\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // NOTE: Remember a device can be mouse + touch enabled so we check on first touch event\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEndEvent !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.loadjs = factory();\n  }\n}(this, function() {\n/**\n * Global dependencies.\n * @global {Object} document - DOM\n */\n\nvar devnull = function() {},\n    bundleIdCache = {},\n    bundleResultCache = {},\n    bundleCallbackQueue = {};\n\n\n/**\n * Subscribe to bundle load event.\n * @param {string[]} bundleIds - Bundle ids\n * @param {Function} callbackFn - The callback function\n */\nfunction subscribe(bundleIds, callbackFn) {\n  // listify\n  bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n\n  var depsNotFound = [],\n      i = bundleIds.length,\n      numWaiting = i,\n      fn,\n      bundleId,\n      r,\n      q;\n\n  // define callback function\n  fn = function (bundleId, pathsNotFound) {\n    if (pathsNotFound.length) depsNotFound.push(bundleId);\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(depsNotFound);\n  };\n\n  // register callback\n  while (i--) {\n    bundleId = bundleIds[i];\n\n    // execute callback if in result cache\n    r = bundleResultCache[bundleId];\n    if (r) {\n      fn(bundleId, r);\n      continue;\n    }\n\n    // add to callback queue\n    q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n    q.push(fn);\n  }\n}\n\n\n/**\n * Publish bundle load event.\n * @param {string} bundleId - Bundle id\n * @param {string[]} pathsNotFound - List of files not found\n */\nfunction publish(bundleId, pathsNotFound) {\n  // exit if id isn't defined\n  if (!bundleId) return;\n\n  var q = bundleCallbackQueue[bundleId];\n\n  // cache result\n  bundleResultCache[bundleId] = pathsNotFound;\n\n  // exit if queue is empty\n  if (!q) return;\n\n  // empty callback queue\n  while (q.length) {\n    q[0](bundleId, pathsNotFound);\n    q.splice(0, 1);\n  }\n}\n\n\n/**\n * Execute callbacks.\n * @param {Object or Function} args - The callback args\n * @param {string[]} depsNotFound - List of dependencies not found\n */\nfunction executeCallbacks(args, depsNotFound) {\n  // accept function as argument\n  if (args.call) args = {success: args};\n\n  // success and error callbacks\n  if (depsNotFound.length) (args.error || devnull)(depsNotFound);\n  else (args.success || devnull)(args);\n}\n\n\n/**\n * Load individual file.\n * @param {string} path - The file path\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFile(path, callbackFn, args, numTries) {\n  var doc = document,\n      async = args.async,\n      maxTries = (args.numRetries || 0) + 1,\n      beforeCallbackFn = args.before || devnull,\n      pathStripped = path.replace(/^(css|img)!/, ''),\n      isCss,\n      e;\n\n  numTries = numTries || 0;\n\n  if (/(^css!|\\.css$)/.test(path)) {\n    isCss = true;\n\n    // css\n    e = doc.createElement('link');\n    e.rel = 'stylesheet';\n    e.href = pathStripped; //.replace(/^css!/, '');  // remove \"css!\" prefix\n  } else if (/(^img!|\\.(png|gif|jpg|svg)$)/.test(path)) {\n    // image\n    e = doc.createElement('img');\n    e.src = pathStripped;    \n  } else {\n    // javascript\n    e = doc.createElement('script');\n    e.src = path;\n    e.async = async === undefined ? true : async;\n  }\n\n  e.onload = e.onerror = e.onbeforeload = function (ev) {\n    var result = ev.type[0];\n\n    // Note: The following code isolates IE using `hideFocus` and treats empty\n    // stylesheets as failures to get around lack of onerror support\n    if (isCss && 'hideFocus' in e) {\n      try {\n        if (!e.sheet.cssText.length) result = 'e';\n      } catch (x) {\n        // sheets objects created from load errors don't allow access to\n        // `cssText`\n        result = 'e';\n      }\n    }\n\n    // handle retries in case of load failure\n    if (result == 'e') {\n      // increment counter\n      numTries += 1;\n\n      // exit function and try again\n      if (numTries < maxTries) {\n        return loadFile(path, callbackFn, args, numTries);\n      }\n    }\n\n    // execute callback\n    callbackFn(path, result, ev.defaultPrevented);\n  };\n\n  // add to document (unless callback returns `false`)\n  if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n}\n\n\n/**\n * Load multiple files.\n * @param {string[]} paths - The file paths\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFiles(paths, callbackFn, args) {\n  // listify paths\n  paths = paths.push ? paths : [paths];\n\n  var numWaiting = paths.length,\n      x = numWaiting,\n      pathsNotFound = [],\n      fn,\n      i;\n\n  // define callback function\n  fn = function(path, result, defaultPrevented) {\n    // handle error\n    if (result == 'e') pathsNotFound.push(path);\n\n    // handle beforeload event. If defaultPrevented then that means the load\n    // will be blocked (ex. Ghostery/ABP on Safari)\n    if (result == 'b') {\n      if (defaultPrevented) pathsNotFound.push(path);\n      else return;\n    }\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(pathsNotFound);\n  };\n\n  // load scripts\n  for (i=0; i < x; i++) loadFile(paths[i], fn, args);\n}\n\n\n/**\n * Initiate script load and register bundle.\n * @param {(string|string[])} paths - The file paths\n * @param {(string|Function)} [arg1] - The bundleId or success callback\n * @param {Function} [arg2] - The success or error callback\n * @param {Function} [arg3] - The error callback\n */\nfunction loadjs(paths, arg1, arg2) {\n  var bundleId,\n      args;\n\n  // bundleId (if string)\n  if (arg1 && arg1.trim) bundleId = arg1;\n\n  // args (default is {})\n  args = (bundleId ? arg2 : arg1) || {};\n\n  // throw error if bundle is already defined\n  if (bundleId) {\n    if (bundleId in bundleIdCache) {\n      throw \"LoadJS\";\n    } else {\n      bundleIdCache[bundleId] = true;\n    }\n  }\n\n  // load scripts\n  loadFiles(paths, function (pathsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, pathsNotFound);\n\n    // publish bundle load event\n    publish(bundleId, pathsNotFound);\n  }, args);\n}\n\n\n/**\n * Execute callbacks when dependencies have been satisfied.\n * @param {(string|string[])} deps - List of bundle ids\n * @param {Object} args - success/error arguments\n */\nloadjs.ready = function ready(deps, args) {\n  // subscribe to bundle load event\n  subscribe(deps, function (depsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, depsNotFound);\n  });\n\n  return loadjs;\n};\n\n\n/**\n * Manually satisfy bundle dependencies.\n * @param {string} bundleId - The bundle id\n */\nloadjs.done = function done(bundleId) {\n  publish(bundleId, []);\n};\n\n\n/**\n * Reset loadjs dependencies statuses\n */\nloadjs.reset = function reset() {\n  bundleIdCache = {};\n  bundleResultCache = {};\n  bundleCallbackQueue = {};\n};\n\n\n/**\n * Determine if bundle has already been defined\n * @param String} bundleId - The bundle id\n */\nloadjs.isDefined = function isDefined(bundleId) {\n  return bundleId in bundleIdCache;\n};\n\n\n// export\nreturn loadjs;\n\n}));\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport utils from './utils';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        try {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            const test = '___test';\n\n            // Try to use it (it might be disabled, e.g. user is in private mode)\n            // see: https://github.com/sampotts/plyr/issues/131\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        if (!Storage.supported || !this.enabled) {\n            return null;\n        }\n\n        const store = window.localStorage.getItem(this.key);\n\n        if (utils.is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return utils.is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!utils.is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (utils.is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        utils.extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\nexport default { providers, types };\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport loadjs from 'loadjs';\nimport Storage from './storage';\nimport support from './support';\nimport { providers } from './types';\n\nconst utils = {\n    // Check variable types\n    is: {\n        object(input) {\n            return utils.getConstructor(input) === Object;\n        },\n        number(input) {\n            return utils.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return utils.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return utils.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return utils.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !utils.is.nullOrUndefined(input) && Array.isArray(input);\n        },\n        weakMap(input) {\n            return utils.is.instanceof(input, WeakMap);\n        },\n        nodeList(input) {\n            return utils.is.instanceof(input, NodeList);\n        },\n        element(input) {\n            return utils.is.instanceof(input, Element);\n        },\n        textNode(input) {\n            return utils.getConstructor(input) === Text;\n        },\n        event(input) {\n            return utils.is.instanceof(input, Event);\n        },\n        cue(input) {\n            return utils.is.instanceof(input, window.TextTrackCue) || utils.is.instanceof(input, window.VTTCue);\n        },\n        track(input) {\n            return utils.is.instanceof(input, TextTrack) || (!utils.is.nullOrUndefined(input) && utils.is.string(input.kind));\n        },\n        url(input) {\n            return !utils.is.nullOrUndefined(input) && /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/.test(input);\n        },\n        nullOrUndefined(input) {\n            return input === null || typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                utils.is.nullOrUndefined(input) ||\n                ((utils.is.string(input) || utils.is.array(input) || utils.is.nodeList(input)) && !input.length) ||\n                (utils.is.object(input) && !Object.keys(input).length)\n            );\n        },\n        instanceof(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n    },\n\n    getConstructor(input) {\n        return !utils.is.nullOrUndefined(input) ? input.constructor : null;\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Fetch wrapper\n    // Using XHR to avoid issues with older browsers\n    fetch(url, responseType = 'text') {\n        return new Promise((resolve, reject) => {\n            try {\n                const request = new XMLHttpRequest();\n\n                // Check for CORS support\n                if (!('withCredentials' in request)) {\n                    return;\n                }\n\n                request.addEventListener('load', () => {\n                    if (responseType === 'text') {\n                        try {\n                            resolve(JSON.parse(request.responseText));\n                        } catch (e) {\n                            resolve(request.responseText);\n                        }\n                    } else {\n                        resolve(request.response);\n                    }\n                });\n\n                request.addEventListener('error', () => {\n                    throw new Error(request.statusText);\n                });\n\n                request.open('GET', url, true);\n\n                // Set the required response type\n                request.responseType = responseType;\n\n                request.send();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    },\n\n    // Load image avoiding xhr/fetch CORS issues\n    // Server status can't be obtained this way unfortunately, so this uses \"naturalWidth\" to determine if the image has loaded.\n    // By default it checks if it is at least 1px, but you can add a second argument to change this.\n    loadImage(src, minWidth = 1) {\n        return new Promise((resolve, reject) => {\n            const image = new Image();\n            const handler = () => {\n                delete image.onload;\n                delete image.onerror;\n                (image.naturalWidth >= minWidth ? resolve : reject)(image);\n            };\n            Object.assign(image, {onload: handler, onerror: handler, src});\n        });\n    },\n\n    // Load an external script\n    loadScript(url) {\n        return new Promise((resolve, reject) => {\n            loadjs(url, {\n                success: resolve,\n                error: reject,\n            });\n        });\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        const exists = () => document.getElementById(id) !== null;\n\n        const update = (container, data) => {\n            container.innerHTML = data;\n\n            // Check again incase of race condition\n            if (hasId && exists()) {\n                return;\n            }\n\n            // Inject the SVG to the body\n            document.body.insertAdjacentElement('afterbegin', container);\n        };\n\n        // Only load once if ID set\n        if (!hasId || !exists()) {\n            const useStorage = Storage.supported;\n\n            // Create container\n            const container = document.createElement('div');\n            utils.toggleHidden(container, true);\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (useStorage) {\n                const cached = window.localStorage.getItem(`${prefix}-${id}`);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    update(container, data.content);\n                }\n            }\n\n            // Get the sprite\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.empty(result)) {\n                        return;\n                    }\n\n                    if (useStorage) {\n                        window.localStorage.setItem(\n                            `${prefix}-${id}`,\n                            JSON.stringify({\n                                content: result,\n                            }),\n                        );\n                    }\n\n                    update(container, result);\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.innerText = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove element(s)\n    removeElement(element) {\n        if (utils.is.nodeList(element) || utils.is.array(element)) {\n            Array.from(element).forEach(utils.removeElement);\n            return;\n        }\n\n        if (!utils.is.element(element) || !utils.is.element(element.parentNode)) {\n            return;\n        }\n\n        element.parentNode.removeChild(element);\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Replace element\n    replaceElement(newChild, oldChild) {\n        if (!utils.is.element(oldChild) || !utils.is.element(oldChild.parentNode) || !utils.is.element(newChild)) {\n            return null;\n        }\n\n        oldChild.parentNode.replaceChild(newChild, oldChild);\n\n        return newChild;\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        if (!utils.is.element(element) || utils.is.empty(attributes)) {\n            return;\n        }\n\n        Object.entries(attributes).forEach(([\n            key,\n            value,\n        ]) => {\n            element.setAttribute(key, value);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle hidden\n    toggleHidden(element, hidden) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        let hide = hidden;\n\n        if (!utils.is.boolean(hide)) {\n            hide = !element.hasAttribute('hidden');\n        }\n\n        if (hide) {\n            element.setAttribute('hidden', '');\n        } else {\n            element.removeAttribute('hidden');\n        }\n    },\n\n    // Mirror Element.classList.toggle, with IE compatibility for \"force\" argument\n    toggleClass(element, className, force) {\n        if (utils.is.element(element)) {\n            let method = 'toggle';\n            if (typeof force !== 'undefined') {\n                method = force ? 'add' : 'remove';\n            }\n\n            element.classList[method](className);\n            return element.classList.contains(className);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.element(element) && element.classList.contains(className);\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus(element = null, toggle = false) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        const focusable = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = focusable[0];\n        const last = focusable[focusable.length - 1];\n\n        const trap = event => {\n            // Bail if not tab key or not fullscreen\n            if (event.key !== 'Tab' || event.keyCode !== 9) {\n                return;\n            }\n\n            // Get the current focused element\n            const focused = utils.getFocusElement();\n\n            if (focused === last && !event.shiftKey) {\n                // Move focus to first element that can be tabbed if Shift isn't used\n                first.focus();\n                event.preventDefault();\n            } else if (focused === first && event.shiftKey) {\n                // Move focus to last element that can be tabbed if Shift is used\n                last.focus();\n                event.preventDefault();\n            }\n        };\n\n        if (toggle) {\n            utils.on(this.elements.container, 'keydown', trap, false);\n        } else {\n            utils.off(this.elements.container, 'keydown', trap, false);\n        }\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle = false, passive = true, capture = false) {\n        // Bail if no elemetns, event, or callback\n        if (utils.is.empty(elements) || utils.is.empty(event) || !utils.is.function(callback)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements) || utils.is.array(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just the capture boolean for browsers with no passive listener support\n        let options = capture;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive,\n                // Whether the listener is a capturing listener or not\n                capture,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events = '', callback, passive = true, capture = false) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events = '', callback, passive = true, capture = false) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type = '', bubbles = false, detail = {}) {\n        // Bail if no element\n        if (!utils.is.element(element) || utils.is.empty(type)) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles,\n            detail: Object.assign({}, detail, {\n                plyr: this,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(element, input) {\n        // If multiple elements passed\n        if (utils.is.array(element) || utils.is.nodeList(element)) {\n            Array.from(element).forEach(target => utils.toggleState(target, input));\n            return;\n        }\n\n        // Bail if no target\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        // Get state\n        const pressed = element.getAttribute('aria-pressed') === 'true';\n        const state = utils.is.boolean(input) ? input : !pressed;\n\n        // Set the attribute on target\n        element.setAttribute('aria-pressed', state);\n    },\n\n    // Format string\n    format(input, ...args) {\n        if (utils.is.empty(input)) {\n            return input;\n        }\n\n        return input.toString().replace(/{(\\d+)}/g, (match, i) => (utils.is.string(args[i]) ? args[i] : ''));\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Time helpers\n    getHours(value) {\n        return parseInt((value / 60 / 60) % 60, 10);\n    },\n    getMinutes(value) {\n        return parseInt((value / 60) % 60, 10);\n    },\n    getSeconds(value) {\n        return parseInt(value % 60, 10);\n    },\n\n    // Format time to UI friendly string\n    formatTime(time = 0, displayHours = false, inverted = false) {\n        // Bail if the value isn't a number\n        if (!utils.is.number(time)) {\n            return utils.formatTime(null, displayHours, inverted);\n        }\n\n        // Format time component to add leading zero\n        const format = value => `0${value}`.slice(-2);\n\n        // Breakdown to hours, mins, secs\n        let hours = utils.getHours(time);\n        const mins = utils.getMinutes(time);\n        const secs = utils.getSeconds(time);\n\n        // Do we need to display hours?\n        if (displayHours || hours > 0) {\n            hours = `${hours}:`;\n        } else {\n            hours = '';\n        }\n\n        // Render\n        return `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n    },\n\n    // Replace all occurances of a string in a string\n    replaceAll(input = '', find = '', replace = '') {\n        return input.replace(new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'), replace.toString());\n    },\n\n    // Convert to title case\n    toTitleCase(input = '') {\n        return input.toString().replace(/\\w\\S*/g, text => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase());\n    },\n\n    // Convert string to pascalCase\n    toPascalCase(input = '') {\n        let string = input.toString();\n\n        // Convert kebab case\n        string = utils.replaceAll(string, '-', ' ');\n\n        // Convert snake case\n        string = utils.replaceAll(string, '_', ' ');\n\n        // Convert to title case\n        string = utils.toTitleCase(string);\n\n        // Convert to pascal case\n        return utils.replaceAll(string, ' ', '');\n    },\n\n    // Convert string to pascalCase\n    toCamelCase(input = '') {\n        let string = input.toString();\n\n        // Convert to pascal case\n        string = utils.toPascalCase(string);\n\n        // Convert first character to lowercase\n        return string.charAt(0).toLowerCase() + string.slice(1);\n    },\n\n    // Deep extend destination object with N more objects\n    extend(target = {}, ...sources) {\n        if (!sources.length) {\n            return target;\n        }\n\n        const source = sources.shift();\n\n        if (!utils.is.object(source)) {\n            return target;\n        }\n\n        Object.keys(source).forEach(key => {\n            if (utils.is.object(source[key])) {\n                if (!Object.keys(target).includes(key)) {\n                    Object.assign(target, { [key]: {} });\n                }\n\n                utils.extend(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        });\n\n        return utils.extend(target, ...sources);\n    },\n\n    // Remove duplicates in an array\n    dedupe(array) {\n        if (!utils.is.array(array)) {\n            return array;\n        }\n\n        return array.filter((item, index) => array.indexOf(item) === index);\n    },\n\n    // Clone nested objects\n    cloneDeep(object) {\n        return JSON.parse(JSON.stringify(object));\n    },\n\n    // Get a nested value in an object\n    getDeep(object, path) {\n        return path.split('.').reduce((obj, key) => obj && obj[key], object);\n    },\n\n    // Get the closest value in an array\n    closest(array, value) {\n        if (!utils.is.array(array) || !array.length) {\n            return null;\n        }\n\n        return array.reduce((prev, curr) => (Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev));\n    },\n\n    // Get the provider for a given URL\n    getProviderByUrl(url) {\n        // YouTube\n        if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n            return providers.youtube;\n        }\n\n        // Vimeo\n        if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{0,9}(?=\\b|\\/)/.test(url)) {\n            return providers.vimeo;\n        }\n\n        return null;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert a URL to a location object\n    parseUrl(url) {\n        const parser = document.createElement('a');\n        parser.href = url;\n        return parser;\n    },\n\n    // Get URL query parameters\n    getUrlParams(input) {\n        let search = input;\n\n        // Parse URL if needed\n        if (input.startsWith('http://') || input.startsWith('https://')) {\n            ({ search } = utils.parseUrl(input));\n        }\n\n        if (utils.is.empty(search)) {\n            return null;\n        }\n\n        const hashes = search.slice(search.indexOf('?') + 1).split('&');\n\n        return hashes.reduce((params, hash) => {\n            const [\n                key,\n                val,\n            ] = hash.split('=');\n\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    },\n\n    // Convert object to URL parameters\n    buildUrlParams(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Like outerHTML, but also works for DocumentFragment\n    getHTML(element) {\n        const wrapper = document.createElement('div');\n        wrapper.appendChild(element);\n        return wrapper.innerHTML;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    get transitionEndEvent() {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return utils.is.string(type) ? events[type] : false;\n    },\n\n    // Force repaint of element\n    repaint(element) {\n        setTimeout(() => {\n            utils.toggleHidden(element, true);\n            element.offsetHeight; // eslint-disable-line\n            utils.toggleHidden(element, false);\n        }, 0);\n    },\n};\n\nexport default utils;\n","// ==========================================================================\n// Plyr HTML5 helpers\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\n\nconst html5 = {\n    getSources() {\n        if (!this.isHTML5) {\n            return null;\n        }\n\n        return this.media.querySelectorAll('source');\n    },\n\n    // Get quality levels\n    getQualityOptions() {\n        if (!this.isHTML5) {\n            return null;\n        }\n\n        // Get sources\n        const sources = html5.getSources.call(this);\n\n        if (utils.is.empty(sources)) {\n            return null;\n        }\n\n        // Get <source> with size attribute\n        const sizes = Array.from(sources).filter(source => !utils.is.empty(source.getAttribute('size')));\n\n        // If none, bail\n        if (utils.is.empty(sizes)) {\n            return null;\n        }\n\n        // Reduce to unique list\n        return utils.dedupe(sizes.map(source => Number(source.getAttribute('size'))));\n    },\n\n    extend() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        const player = this;\n\n        // Quality\n        Object.defineProperty(player.media, 'quality', {\n            get() {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                if (utils.is.empty(sources)) {\n                    return null;\n                }\n\n                const matches = Array.from(sources).filter(source => source.getAttribute('src') === player.source);\n\n                if (utils.is.empty(matches)) {\n                    return null;\n                }\n\n                return Number(matches[0].getAttribute('size'));\n            },\n            set(input) {\n                // Get sources\n                const sources = html5.getSources.call(player);\n\n                if (utils.is.empty(sources)) {\n                    return;\n                }\n\n                // Get matches for requested size\n                const matches = Array.from(sources).filter(source => Number(source.getAttribute('size')) === input);\n\n                // No matches for requested size\n                if (utils.is.empty(matches)) {\n                    return;\n                }\n\n                // Get supported sources\n                const supported = matches.filter(source => support.mime.call(player, source.getAttribute('type')));\n\n                // No supported sources\n                if (utils.is.empty(supported)) {\n                    return;\n                }\n\n                // Trigger change event\n                utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                    quality: input,\n                });\n\n                // Get current state\n                const { currentTime, playing } = player;\n\n                // Set new source\n                player.media.src = supported[0].getAttribute('src');\n\n                // Restore time\n                const onLoadedMetaData = () => {\n                    player.currentTime = currentTime;\n                    player.off('loadedmetadata', onLoadedMetaData);\n                };\n                player.on('loadedmetadata', onLoadedMetaData);\n\n                // Load new source\n                player.media.load();\n\n                // Resume playing\n                if (playing) {\n                    player.play();\n                }\n\n                // Trigger change event\n                utils.dispatchEvent.call(player, player.media, 'qualitychange', false, {\n                    quality: input,\n                });\n            },\n        });\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        utils.removeElement(html5.getSources());\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default html5;\n","// ==========================================================================\n// Plyr internationalization\n// ==========================================================================\n\nimport utils from './utils';\n\nconst i18n = {\n    get(key = '', config = {}) {\n        if (utils.is.empty(key) || utils.is.empty(config)) {\n            return '';\n        }\n\n        let string = utils.getDeep(config.i18n, key);\n\n        if (utils.is.empty(string)) {\n            return '';\n        }\n\n        const replace = {\n            '{seektime}': config.seekTime,\n            '{title}': config.title,\n        };\n\n        Object.entries(replace).forEach(([\n            key,\n            value,\n        ]) => {\n            string = utils.replaceAll(string, key, value);\n        });\n\n        return string;\n    },\n};\n\nexport default i18n;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport captions from './captions';\nimport html5 from './html5';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n\n\n    // Get icon URL\n    getIconUrl() {\n        const url = new URL(this.config.iconUrl, window.location);\n        const cors = url.host !== window.location.host || (browser.isIE && !window.svg4everybody);\n\n        return {\n            url: this.config.iconUrl,\n            cors,\n        };\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                fastForward: utils.getElement.call(this, this.config.selectors.buttons.fastForward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n            };\n\n            // Seek tooltip\n            if (utils.is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.cors ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n                focusable: 'false',\n            }),\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = i18n.get(type, this.config);\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return utils.createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (utils.is.empty(text)) {\n            return null;\n        }\n\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text,\n            ),\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = utils.toCamelCase(buttonType);\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (buttonType) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = buttonType;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        utils.setAttributes(button, attributes);\n\n        // We have multiple play buttons\n        if (type === 'play') {\n            if (!utils.is.array(this.elements.buttons[type])) {\n                this.elements.buttons[type] = [];\n            }\n\n            this.elements.buttons[type].push(button);\n        } else {\n            this.elements.buttons[type] = button;\n        }\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                id: `${attributes.id}-label`,\n                class: this.config.classNames.hidden,\n            },\n            i18n.get(type, this.config),\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                    // A11y fixes for https://github.com/sampotts/plyr/issues/905\n                    role: 'slider',\n                    'aria-labelledby': `${attributes.id}-label`,\n                    'aria-valuemin': 0,\n                    'aria-valuemax': 100,\n                    'aria-valuenow': 0,\n                },\n                attributes,\n            ),\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                    role: 'presentation',\n                    'aria-hidden': true,\n                },\n                attributes,\n            ),\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = i18n.get('played', this.config);\n                    break;\n\n                case 'buffer':\n                    suffix = i18n.get('buffered', this.config);\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.innerText = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const attributes = utils.getAttributesFromSelector(this.config.selectors.display[type]);\n\n        const container = utils.createElement('div', utils.extend(attributes, {\n            class: `plyr__time ${attributes.class}`,\n            'aria-label': i18n.get(type, this.config),\n        }), '00:00');\n\n        // Reference for updates\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem({value, list, type, title, badge = null, checked = false}) {\n        const item = utils.createElement('li');\n\n        const label = utils.createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = utils.createElement(\n            'input',\n            utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            }),\n        );\n\n        const faux = utils.createElement('span', { hidden: '' });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (utils.is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!utils.is.element(target) || !utils.is.number(time)) {\n            return;\n        }\n\n        // Always display hours if duration is over an hour\n        const forceHours = utils.getHours(this.duration) > 0;\n\n        // eslint-disable-next-line no-param-reassign\n        target.innerText = utils.formatTime(time, forceHours, inverted);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.element(this.elements.inputs.volume)) {\n            controls.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (utils.is.element(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!utils.is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !utils.is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        const setProgress = (target, input) => {\n            const value = utils.is.number(input) ? input : 0;\n            const progress = utils.is.element(target) ? target : this.elements.display.buffer;\n\n            // Update value and label\n            if (utils.is.element(progress)) {\n                progress.value = value;\n\n                // Update text label inside\n                const label = progress.getElementsByTagName('span')[0];\n                if (utils.is.element(label)) {\n                    label.childNodes[0].nodeValue = value;\n                }\n            }\n        };\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                case 'seeked':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        controls.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    setProgress(this.elements.display.buffer, this.buffered * 100);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Set aria value for https://github.com/sampotts/plyr/issues/905\n        range.setAttribute('aria-valuenow', range.value);\n\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Set CSS custom property\n        range.style.setProperty('--value', `${range.value / range.max * 100}%`);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.element(this.elements.inputs.seek) ||\n            !utils.is.element(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.progress.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        const toggle = toggle => {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, toggle);\n        };\n\n        // Hide on touch\n        if (this.touch) {\n            toggle(false);\n            return;\n        }\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        controls.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            toggle(event.type === 'mouseenter');\n        }\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !utils.is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        controls.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        controls.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded or durationchange events\n    durationUpdate() {\n        // Bail if no ui or durationchange event triggered after playing/seek when invertTime is false\n        if (!this.supported.ui || (!this.config.invertTime && this.currentTime)) {\n            return;\n        }\n\n        // If there's a spot to display duration\n        const hasDuration = utils.is.element(this.elements.display.duration);\n\n        // If there's only one time display, display duration there\n        if (!hasDuration && this.config.displayDuration && this.paused) {\n            controls.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (hasDuration) {\n            controls.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        utils.toggleHidden(this.elements.settings.tabs[setting], !toggle);\n    },\n\n    // Set the quality menu\n    // TODO: Vimeo support\n    setQualityMenu(options) {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.quality)) {\n            return;\n        }\n\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.options.quality.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            const label = i18n.get(`qualityBadge.${quality}`, this.config);\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        // Sort options by the config and then render options\n        this.options.quality\n            .sort((a, b) => {\n                const sorting = this.config.quality.options;\n                return sorting.indexOf(a) > sorting.indexOf(b) ? 1 : -1;\n            })\n            .forEach(quality => {\n                controls.createMenuItem.call(this, {\n                    value: quality,\n                    list,\n                    type,\n                    title: controls.getLabel.call(this, 'quality', quality),\n                    badge: getBadge(quality),\n                });\n            });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? i18n.get('normal', this.config) : `${value}&times;`;\n\n            case 'quality':\n                if (utils.is.number(value)) {\n                    const label = i18n.get(`qualityLabel.${value}`, this.config);\n\n                    if (!label.length) {\n                        return `${value}p`;\n                    }\n\n                    return label;\n                }\n\n                return utils.toTitleCase(value);\n\n            case 'captions':\n                return captions.getLabel.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container, input) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.currentTrack;\n                break;\n\n            default:\n                value = !utils.is.empty(input) ? input : this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!utils.is.empty(this.options[setting]) && !this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // If there's no list it means it's not been rendered...\n        if (!utils.is.element(list)) {\n            return;\n        }\n\n        // Update the label\n        const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n        label.innerHTML = controls.getLabel.call(this, setting, value);\n\n        // Find the radio option and check it\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (utils.is.element(target)) {\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.loop)) {\n            return;\n        }\n\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.loop, false);\n        utils.toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                i18n.get(option, this.config)\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n        const tracks = captions.getTracks.call(this);\n\n        // Toggle the pane and tab\n        controls.toggleTab.call(this, type, tracks.length);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If there's no captions, bail\n        if (!tracks.length) {\n            return;\n        }\n\n        // Generate options data\n        const options = tracks.map((track, value) => ({\n            value,\n            checked: this.captions.active && this.currentTrack === value,\n            title: captions.getLabel.call(this, track),\n            badge: track.language && controls.createBadge.call(this, track.language.toUpperCase()),\n            list,\n            type: 'language',\n        }));\n\n        // Add the \"Disabled\" option to turn off captions\n        options.unshift({\n            value: -1,\n            checked: !this.captions.active,\n            title: i18n.get('disabled', this.config),\n            list,\n            type: 'language',\n        });\n\n        // Generate options\n        options.forEach(controls.createMenuItem.bind(this));\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu(options) {\n        // Do nothing if not selected\n        if (!this.config.controls.includes('settings') || !this.config.settings.includes('speed')) {\n            return;\n        }\n\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.speed)) {\n            return;\n        }\n\n        const type = 'speed';\n\n        // Set the speed options\n        if (utils.is.array(options)) {\n            this.options.speed = options;\n        } else if (this.isHTML5 || this.isVimeo) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n            ];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed) && this.options.speed.length > 1;\n        controls.toggleTab.call(this, type, toggle);\n\n        // Check if we need to toggle the parent\n        controls.checkMenu.call(this);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => {\n            controls.createMenuItem.call(this, {\n                value: speed,\n                list,\n                type,\n                title: controls.getLabel.call(this, 'speed', speed),\n            });\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Check if we need to hide/show the settings menu\n    checkMenu() {\n        const { tabs } = this.elements.settings;\n        const visible = !utils.is.empty(tabs) && Object.values(tabs).some(tab => !tab.hidden);\n\n        utils.toggleHidden(this.elements.settings.menu, !visible);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n\n        // Menu and button are required\n        if (!utils.is.element(form) || !utils.is.element(button)) {\n            return;\n        }\n\n        const show = utils.is.boolean(event) ? event : utils.is.element(form) && form.hasAttribute('hidden');\n\n        if (utils.is.event(event)) {\n            const isMenuItem = utils.is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (utils.is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (utils.is.element(form)) {\n            utils.toggleHidden(form, !show);\n            utils.toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.removeAttribute('hidden');\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(target = '') {\n        const { menu } = this.elements.settings;\n        const pane = document.getElementById(target);\n\n        // Nothing to show, bail\n        if (!utils.is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"]:not([hidden])');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEndEvent, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEndEvent, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        utils.toggleHidden(current, true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        utils.toggleHidden(pane, false);\n\n        const tabs = utils.getElements.call(this, `[aria-controls=\"${target}\"]`);\n        Array.from(tabs).forEach(tab => {\n            tab.setAttribute('aria-expanded', true);\n        });\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00',\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                }),\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n                hidden: '',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                }),\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                hidden: '',\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    i18n.get(type, this.config),\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    hidden: '',\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    i18n.get(type, this.config),\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.isHTML5) {\n            controls.setQualityMenu.call(this, html5.getQualityOptions.call(this));\n        }\n\n        controls.setSpeedMenu.call(this);\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.cors) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n        this.elements.controls = null;\n\n        // Set template properties\n        const props = {\n            id: this.id,\n            seektime: this.config.seekTime,\n            title: this.config.title,\n        };\n        let update = true;\n\n        if (utils.is.string(this.config.controls) || utils.is.element(this.config.controls)) {\n            // String or HTMLElement passed as the option\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls.call(this, props);\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: captions.getLabel.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n            update = false;\n        }\n\n        // Replace props with their value\n        const replace = input => {\n            let result = input;\n\n            Object.entries(props).forEach(([\n                key,\n                value,\n            ]) => {\n                result = utils.replaceAll(result, `{${key}}`, value);\n            });\n\n            return result;\n        };\n\n        // Update markup\n        if (update) {\n            if (utils.is.string(this.config.controls)) {\n                container = replace(container);\n            } else if (utils.is.element(container)) {\n                container.innerHTML = replace(container.innerHTML);\n            }\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.element(container)) {\n            target.appendChild(container);\n        } else if (container) {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (!utils.is.element(this.elements.controls)) {\n            controls.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            utils.repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join(''),\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// TODO: Create as class\n// ==========================================================================\n\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (utils.is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.element(this.elements.captions)) {\n            this.elements.captions = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.captions));\n\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Get browser info\n        const browser = utils.getBrowser();\n\n        // Fix IE captions if CORS is used\n        // Fetch captions and inject as blobs instead (data URIs not supported!)\n        if (browser.isIE && window.URL) {\n            const elements = this.media.querySelectorAll('track');\n\n            Array.from(elements).forEach(track => {\n                const src = track.getAttribute('src');\n                const href = utils.parseUrl(src);\n\n                if (href.hostname !== window.location.href.hostname && [\n                    'http:',\n                    'https:',\n                ].includes(href.protocol)) {\n                    utils\n                        .fetch(src, 'blob')\n                        .then(blob => {\n                            track.setAttribute('src', window.URL.createObjectURL(blob));\n                        })\n                        .catch(() => {\n                            utils.removeElement(track);\n                        });\n                }\n            });\n        }\n\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        }\n\n        // Get language from storage, fallback to config\n        let language = this.storage.get('language') || this.config.captions.language;\n        if (language === 'auto') {\n            [ language ] = (navigator.language || navigator.userLanguage).split('-');\n        }\n        // Set language and show if active\n        captions.setLanguage.call(this, language, active);\n\n        // Watch changes to textTracks and update captions menu\n        if (this.isHTML5) {\n            const trackEvents = this.config.captions.update ? 'addtrack removetrack' : 'removetrack';\n            utils.on(this.media.textTracks, trackEvents, captions.update.bind(this));\n        }\n\n        // Update available languages in list next tick (the event must not be triggered before the listeners)\n        setTimeout(captions.update.bind(this), 0);\n    },\n\n    update() {\n        const tracks = captions.getTracks.call(this, true);\n        // Get the wanted language\n        const { language, meta } = this.captions;\n\n        // Handle tracks (add event listener and \"pseudo\"-default)\n        if (this.isHTML5 && this.isVideo) {\n            tracks\n                .filter(track => !meta.get(track))\n                .forEach(track => {\n                    this.debug.log('Track added', track);\n                    // Attempt to store if the original dom element was \"default\"\n                    meta.set(track, {\n                        default: track.mode === 'showing',\n                    });\n\n                    // Turn off native caption rendering to avoid double captions\n                    track.mode = 'hidden';\n\n                    // Add event listener for cue changes\n                    utils.on(track, 'cuechange', () => captions.updateCues.call(this));\n                });\n        }\n\n        const trackRemoved = !tracks.find(track => track === this.captions.currentTrackNode);\n        const firstMatch = this.language !== language && tracks.find(track => track.language === language);\n\n        // Update language if removed or first matching track added\n        if (trackRemoved || firstMatch) {\n            captions.setLanguage.call(this, language, this.config.captions.active);\n        }\n\n        // Enable or disable captions based on track length\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.enabled, !utils.is.empty(tracks));\n\n        // Update available languages in list\n        if ((this.config.controls || []).includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    set(index, setLanguage = true, show = true) {\n        const tracks = captions.getTracks.call(this);\n\n        // Disable captions if setting to -1\n        if (index === -1) {\n            this.toggleCaptions(false);\n            return;\n        }\n\n        if (!utils.is.number(index)) {\n            this.debug.warn('Invalid caption argument', index);\n            return;\n        }\n\n        if (!(index in tracks)) {\n            this.debug.warn('Track not found', index);\n            return;\n        }\n\n        if (this.captions.currentTrack !== index) {\n            this.captions.currentTrack = index;\n            const track = captions.getCurrentTrack.call(this);\n            const { language } = track || {};\n\n            // Store reference to node for invalidation on remove\n            this.captions.currentTrackNode = track;\n\n            // Prevent setting language in some cases, since it can violate user's intentions\n            if (setLanguage) {\n                this.captions.language = language;\n            }\n\n            // Handle Vimeo captions\n            if (this.isVimeo) {\n                this.embed.enableTextTrack(language);\n            }\n\n            // Trigger event\n            utils.dispatchEvent.call(this, this.media, 'languagechange');\n        }\n\n        if (this.isHTML5 && this.isVideo) {\n            // If we change the active track while a cue is already displayed we need to update it\n            captions.updateCues.call(this);\n        }\n\n        // Show captions\n        if (show) {\n            this.toggleCaptions(true);\n        }\n    },\n\n    setLanguage(language, show = true) {\n        if (!utils.is.string(language)) {\n            this.debug.warn('Invalid language argument', language);\n            return;\n        }\n        // Normalize\n        this.captions.language = language.toLowerCase();\n\n        // Set currentTrack\n        const tracks = captions.getTracks.call(this);\n        const track = captions.getCurrentTrack.call(this, true);\n        captions.set.call(this, tracks.indexOf(track), false, show);\n    },\n\n    // Get current valid caption tracks\n    // If update is false it will also ignore tracks without metadata\n    // This is used to \"freeze\" the language options when captions.update is false\n    getTracks(update = false) {\n        // Handle media or textTracks missing or null\n        const tracks = Array.from((this.media || {}).textTracks || []);\n        // For HTML5, use cache instead of current tracks when it exists (if captions.update is false)\n        // Filter out removed tracks and tracks that aren't captions/subtitles (for example metadata)\n        return tracks\n            .filter(track => !this.isHTML5 || update || this.captions.meta.has(track))\n            .filter(track => [\n                'captions',\n                'subtitles',\n            ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack(fromLanguage = false) {\n        const tracks = captions.getTracks.call(this);\n        const sortIsDefault = track => Number((this.captions.meta.get(track) || {}).default);\n        const sorted = Array.from(tracks).sort((a, b) => sortIsDefault(b) - sortIsDefault(a));\n        return (!fromLanguage && tracks[this.currentTrack]) || sorted.find(track => track.language === this.captions.language) || sorted[0];\n    },\n\n    // Get UI label for track\n    getLabel(track) {\n        let currentTrack = track;\n\n        if (!utils.is.track(currentTrack) && support.textTracks && this.captions.active) {\n            currentTrack = captions.getCurrentTrack.call(this);\n        }\n\n        if (utils.is.track(currentTrack)) {\n            if (!utils.is.empty(currentTrack.label)) {\n                return currentTrack.label;\n            }\n\n            if (!utils.is.empty(currentTrack.language)) {\n                return track.language.toUpperCase();\n            }\n\n            return i18n.get('enabled', this.config);\n        }\n\n        return i18n.get('disabled', this.config);\n    },\n\n    // Update captions using current track's active cues\n    // Also optional array argument in case there isn't any track (ex: vimeo)\n    updateCues(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (!utils.is.element(this.elements.captions)) {\n            this.debug.warn('No captions element to render to');\n            return;\n        }\n\n        // Only accept array or empty input\n        if (!utils.is.nullOrUndefined(input) && !Array.isArray(input)) {\n            this.debug.warn('updateCues: Invalid input', input);\n            return;\n        }\n\n        let cues = input;\n\n        // Get cues from track\n        if (!cues) {\n            const track = captions.getCurrentTrack.call(this);\n            cues = Array.from((track || {}).activeCues || [])\n                .map(cue => cue.getCueAsHTML())\n                .map(utils.getHTML);\n        }\n\n        // Set new caption text\n        const content = cues.map(cueText => cueText.trim()).join('\\n');\n        const changed = content !== this.elements.captions.innerHTML;\n\n        if (changed) {\n            // Empty the container and create a new child element\n            utils.emptyElement(this.elements.captions);\n            const caption = utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.caption));\n            caption.innerHTML = content;\n            this.elements.captions.appendChild(caption);\n\n            // Trigger event\n            utils.dispatchEvent.call(this, this.media, 'cuechange');\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Plyr default config\n// ==========================================================================\n\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Reset to start when playback ended\n    resetOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: '/_Resources/Static/Packages/Jonnitto.Plyr/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: '/_Resources/Static/Packages/Jonnitto.Plyr/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 576,\n        options: [\n            4320,\n            2880,\n            2160,\n            1440,\n            1080,\n            720,\n            576,\n            480,\n            360,\n            240,\n            'default', // YouTube's \"auto\"\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: 'auto',\n        // Listen to new tracks added after Plyr is initialized.\n        // This is needed for streaming captions, but may result in unselectable options\n        update: false,\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n        iosNative: false, // Use the native fullscreen in iOS (disables custom controls)\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        // 'restart',\n        // 'rewind',\n        'play',\n        // 'fast-forward',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime}s',\n        play: 'Play',\n        pause: 'Pause',\n        fastForward: 'Forward {seektime}s',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        normal: 'Normal',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        disabled: 'Disabled',\n        enabled: 'Enabled',\n        advertisement: 'Ad',\n        qualityBadge: {\n            2160: '4K',\n            1440: 'HD',\n            1080: 'HD',\n            720: 'HD',\n            576: 'SD',\n            480: 'SD',\n        },\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            sdk: 'https://player.vimeo.com/api/player.js',\n            iframe: 'https://player.vimeo.com/video/{0}?{1}',\n            api: 'https://vimeo.com/api/v2/video/{0}.json',\n        },\n        youtube: {\n            sdk: 'https://www.youtube.com/iframe_api',\n            api: 'https://www.googleapis.com/youtube/v3/videos?id={0}&key={1}&fields=items(snippet(title))&part=snippet',\n        },\n        googleIMA: {\n            sdk: 'https://imasdk.googleapis.com/js/sdkloader/ima3.js',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        fastForward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n\n        // Ads\n        'adsloaded',\n        'adscontentpause',\n        'adscontentresume',\n        'adstarted',\n        'adsmidpoint',\n        'adscomplete',\n        'adsallcomplete',\n        'adsimpression',\n        'adsclick',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            fastForward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress__buffer',\n            loop: '.plyr__progress__loop', // Used later\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        caption: '.plyr__caption',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        embedContainer: 'plyr__video-embed__container',\n        poster: 'plyr__poster',\n        posterEnabled: 'plyr__poster-enabled',\n        ads: 'plyr__ads',\n        control: 'plyr__control',\n        playing: 'plyr--playing',\n        paused: 'plyr--paused',\n        stopped: 'plyr--stopped',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        cues: 'plyr__cues',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // Embed attributes\n    attributes: {\n        embed: {\n            provider: 'data-plyr-provider',\n            id: 'data-plyr-embed-id',\n        },\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n\n    // Advertisements plugin\n    // Register for an account here: http://vi.ai/publisher-video-monetization/?aid=plyrio\n    ads: {\n        enabled: false,\n        publisherId: '',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Fullscreen wrapper\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API#prefixing\n// ==========================================================================\n\nimport utils from './utils';\n\nconst browser = utils.getBrowser();\n\nfunction onChange() {\n    if (!this.enabled) {\n        return;\n    }\n\n    // Update toggle button\n    const button = this.player.elements.buttons.fullscreen;\n    if (utils.is.element(button)) {\n        utils.toggleState(button, this.active);\n    }\n\n    // Trigger an event\n    utils.dispatchEvent.call(this.player, this.target, this.active ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Trap focus in container\n    if (!browser.isIos) {\n        utils.trapFocus.call(this.player, this.target, this.active);\n    }\n}\n\nfunction toggleFallback(toggle = false) {\n    // Store or restore scroll position\n    if (toggle) {\n        this.scrollPosition = {\n            x: window.scrollX || 0,\n            y: window.scrollY || 0,\n        };\n    } else {\n        window.scrollTo(this.scrollPosition.x, this.scrollPosition.y);\n    }\n\n    // Toggle scroll\n    document.body.style.overflow = toggle ? 'hidden' : '';\n\n    // Toggle class hook\n    utils.toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, toggle);\n\n    // Toggle button and fire events\n    onChange.call(this);\n}\n\nclass Fullscreen {\n    constructor(player) {\n        // Keep reference to parent\n        this.player = player;\n\n        // Get prefix\n        this.prefix = Fullscreen.prefix;\n        this.property = Fullscreen.property;\n\n        // Scroll position\n        this.scrollPosition = { x: 0, y: 0 };\n\n        // Register event listeners\n        // Handle event (incase user presses escape etc)\n        utils.on(document, this.prefix === 'ms' ? 'MSFullscreenChange' : `${this.prefix}fullscreenchange`, () => {\n            // TODO: Filter for target??\n            onChange.call(this);\n        });\n\n        // Fullscreen toggle on double click\n        utils.on(this.player.elements.container, 'dblclick', event => {\n            // Ignore double click in controls\n            if (utils.is.element(this.player.elements.controls) && this.player.elements.controls.contains(event.target)) {\n                return;\n            }\n\n            this.toggle();\n        });\n\n        // Update the UI\n        this.update();\n    }\n\n    // Determine if native supported\n    static get native() {\n        return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n    }\n\n    // Get the prefix for handlers\n    static get prefix() {\n        // No prefix\n        if (utils.is.function(document.exitFullscreen)) {\n            return '';\n        }\n\n        // Check for fullscreen support by vendor prefix\n        let value = '';\n        const prefixes = [\n            'webkit',\n            'moz',\n            'ms',\n        ];\n\n        prefixes.some(pre => {\n            if (utils.is.function(document[`${pre}ExitFullscreen`]) || utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            }\n\n            return false;\n        });\n\n        return value;\n    }\n\n    static get property() {\n        return this.prefix === 'moz' ? 'FullScreen' : 'Fullscreen';\n    }\n\n    // Determine if fullscreen is enabled\n    get enabled() {\n        return (\n            (Fullscreen.native || this.player.config.fullscreen.fallback) &&\n            this.player.config.fullscreen.enabled &&\n            this.player.supported.ui &&\n            this.player.isVideo\n        );\n    }\n\n    // Get active state\n    get active() {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Fallback using classname\n        if (!Fullscreen.native) {\n            return utils.hasClass(this.target, this.player.config.classNames.fullscreen.fallback);\n        }\n\n        const element = !this.prefix ? document.fullscreenElement : document[`${this.prefix}${this.property}Element`];\n\n        return element === this.target;\n    }\n\n    // Get target element\n    get target() {\n        return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.container;\n    }\n\n    // Update UI\n    update() {\n        if (this.enabled) {\n            this.player.debug.log(`${Fullscreen.native ? 'Native' : 'Fallback'} fullscreen enabled`);\n        } else {\n            this.player.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Add styling hook to show button\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);\n    }\n\n    // Make an element fullscreen\n    enter() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen doesn't need the request step\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            if (this.player.playing) {\n                this.target.webkitEnterFullscreen();\n            }\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, true);\n        } else if (!this.prefix) {\n            this.target.requestFullscreen();\n        } else if (!utils.is.empty(this.prefix)) {\n            this.target[`${this.prefix}Request${this.property}`]();\n        }\n    }\n\n    // Bail from fullscreen\n    exit() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            this.target.webkitExitFullscreen();\n            this.player.play();\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, false);\n        } else if (!this.prefix) {\n            (document.cancelFullScreen || document.exitFullscreen).call(document);\n        } else if (!utils.is.empty(this.prefix)) {\n            const action = this.prefix === 'moz' ? 'Cancel' : 'Exit';\n            document[`${this.prefix}${action}${this.property}`]();\n        }\n    }\n\n    // Toggle state\n    toggle() {\n        if (!this.active) {\n            this.enter();\n        } else {\n            this.exit();\n        }\n    }\n}\n\nexport default Fullscreen;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport captions from './captions';\nimport controls from './controls';\nimport i18n from './i18n';\nimport support from './support';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling?\n        this.listeners.media();\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            this.listeners.controls();\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup captions for HTML5\n        if (this.isHTML5) {\n            captions.setup.call(this);\n        }\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality setting\n        this.quality = null;\n\n        // Reset volume display\n        controls.updateVolume.call(this);\n\n        // Reset time display\n        controls.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Check for picture-in-picture support\n        utils.toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n        // Check for airplay support\n        utils.toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n        // Add iOS class\n        utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n        // Add touch class\n        utils.toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        setTimeout(() => {\n            utils.dispatchEvent.call(this, this.media, 'ready');\n        }, 0);\n\n        // Set the title\n        ui.setTitle.call(this);\n\n        // Assure the poster image is set, if the property was added before the element was created\n        if (this.poster && this.elements.poster && !this.elements.poster.style.backgroundImage) {\n            ui.setPoster.call(this, this.poster);\n        }\n\n        // Manually set the duration if user has overridden it.\n        // The event listeners for it doesn't get called if preload is disabled (#701)\n        if (this.config.duration) {\n            controls.durationUpdate.call(this);\n        }\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = i18n.get('play', this.config);\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n            const format = i18n.get('frameTitle', this.config);\n\n            iframe.setAttribute('title', format.replace('{title}', title));\n        }\n    },\n\n    // Toggle poster\n    togglePoster(enable) {\n        utils.toggleClass(this.elements.container, this.config.classNames.posterEnabled, enable);\n    },\n\n    // Set the poster image (async)\n    setPoster(poster) {\n        // Set property regardless of validity\n        this.media.setAttribute('poster', poster);\n\n        // Bail if element is missing\n        if (!utils.is.element(this.elements.poster)) {\n            return Promise.reject();\n        }\n\n        // Load the image, and set poster if successful\n        const loadPromise = utils.loadImage(poster)\n            .then(() => {\n                this.elements.poster.style.backgroundImage = `url('${poster}')`;\n                Object.assign(this.elements.poster.style, {\n                    backgroundImage: `url('${poster}')`,\n                    // Reset backgroundSize as well (since it can be set to \"cover\" for padded thumbnails for youtube)\n                    backgroundSize: '',\n                });\n                ui.togglePoster.call(this, true);\n                return poster;\n            });\n\n        // Hide the element if the poster can't be loaded (otherwise it will just be a black element covering the video)\n        loadPromise.catch(() => ui.togglePoster.call(this, false));\n\n        // Return the promise so the caller can use it as well\n        return loadPromise;\n    },\n\n    // Check playing state\n    checkPlaying(event) {\n        // Class hooks\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        utils.toggleClass(this.elements.container, this.config.classNames.paused, this.paused);\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.stopped);\n\n        // Set ARIA state\n        utils.toggleState(this.elements.buttons.play, this.playing);\n\n        // Only update controls on non timeupdate events\n        if (utils.is.event(event) && event.type === 'timeupdate') {\n            return;\n        }\n\n        // Toggle controls\n        ui.toggleControls.call(this);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Update progress bar loading class state\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Update controls visibility\n            ui.toggleControls.call(this);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Toggle controls based on state and `force` argument\n    toggleControls(force) {\n        const { controls } = this.elements;\n\n        if (controls && this.config.hideControls) {\n            // Show controls if force, loading, paused, or button interaction, otherwise hide\n            this.toggleControls(Boolean(force || this.loading || this.paused || controls.pressed || controls.hover));\n        }\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport controls from './controls';\nimport ui from './ui';\nimport utils from './utils';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nclass Listeners {\n    constructor(player) {\n        this.player = player;\n        this.lastKey = null;\n\n        this.handleKey = this.handleKey.bind(this);\n        this.toggleMenu = this.toggleMenu.bind(this);\n        this.firstTouch = this.firstTouch.bind(this);\n    }\n\n    // Handle key presses\n    handleKey(event) {\n        const code = event.keyCode ? event.keyCode : event.which;\n        const pressed = event.type === 'keydown';\n        const repeat = pressed && code === this.lastKey;\n\n        // Bail if a modifier key is set\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n            return;\n        }\n\n        // If the event is bubbled from the media element\n        // Firefox doesn't get the keycode for whatever reason\n        if (!utils.is.number(code)) {\n            return;\n        }\n\n        // Seek by the number keys\n        const seekByKey = () => {\n            // Divide the max duration into 10th's and times by the number value\n            this.player.currentTime = this.player.duration / 10 * (code - 48);\n        };\n\n        // Handle the key on keydown\n        // Reset on keyup\n        if (pressed) {\n            // Which keycodes should we prevent default\n            const preventDefault = [\n                48,\n                49,\n                50,\n                51,\n                52,\n                53,\n                54,\n                56,\n                57,\n                32,\n                75,\n                38,\n                40,\n                77,\n                39,\n                37,\n                70,\n                67,\n                73,\n                76,\n                79,\n            ];\n\n            // Check focused element\n            // and if the focused element is not editable (e.g. text input)\n            // and any that accept key input http://webaim.org/techniques/keyboard/\n            const focused = utils.getFocusElement();\n            if (utils.is.element(focused) && (\n                focused !== this.player.elements.inputs.seek &&\n                utils.matches(focused, this.player.config.selectors.editable))\n            ) {\n                return;\n            }\n\n            // If the code is found prevent default (e.g. prevent scrolling for arrows)\n            if (preventDefault.includes(code)) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            switch (code) {\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                    // 0-9\n                    if (!repeat) {\n                        seekByKey();\n                    }\n                    break;\n\n                case 32:\n                case 75:\n                    // Space and K key\n                    if (!repeat) {\n                        this.player.togglePlay();\n                    }\n                    break;\n\n                case 38:\n                    // Arrow up\n                    this.player.increaseVolume(0.1);\n                    break;\n\n                case 40:\n                    // Arrow down\n                    this.player.decreaseVolume(0.1);\n                    break;\n\n                case 77:\n                    // M key\n                    if (!repeat) {\n                        this.player.muted = !this.player.muted;\n                    }\n                    break;\n\n                case 39:\n                    // Arrow forward\n                    this.player.forward();\n                    break;\n\n                case 37:\n                    // Arrow back\n                    this.player.rewind();\n                    break;\n\n                case 70:\n                    // F key\n                    this.player.fullscreen.toggle();\n                    break;\n\n                case 67:\n                    // C key\n                    if (!repeat) {\n                        this.player.toggleCaptions();\n                    }\n                    break;\n\n                case 76:\n                    // L key\n                    this.player.loop = !this.player.loop;\n                    break;\n\n                /* case 73:\n                    this.setLoop('start');\n                    break;\n\n                case 76:\n                    this.setLoop();\n                    break;\n\n                case 79:\n                    this.setLoop('end');\n                    break; */\n\n                default:\n                    break;\n            }\n\n            // Escape is handle natively when in full screen\n            // So we only need to worry about non native\n            if (!this.player.fullscreen.enabled && this.player.fullscreen.active && code === 27) {\n                this.player.fullscreen.toggle();\n            }\n\n            // Store last code for next cycle\n            this.lastKey = code;\n        } else {\n            this.lastKey = null;\n        }\n    }\n\n    // Toggle menu\n    toggleMenu(event) {\n        controls.toggleMenu.call(this.player, event);\n    }\n\n    // Device is touch enabled\n    firstTouch() {\n        this.player.touch = true;\n\n        // Add touch class\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.isTouch, true);\n\n        // Clean up\n        utils.off(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Global window & document listeners\n    global(toggle = true) {\n        // Keyboard shortcuts\n        if (this.player.config.keyboard.global) {\n            utils.toggleListener(window, 'keydown keyup', this.handleKey, toggle, false);\n        }\n\n        // Click anywhere closes menu\n        utils.toggleListener(document.body, 'click', this.toggleMenu, toggle);\n\n        // Detect touch by events\n        utils.on(document.body, 'touchstart', this.firstTouch);\n    }\n\n    // Container listeners\n    container() {\n        // Keyboard shortcuts\n        if (!this.player.config.keyboard.global && this.player.config.keyboard.focused) {\n            utils.on(this.player.elements.container, 'keydown keyup', this.handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.player.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.player.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.player.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.player.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls on mouse events and entering fullscreen\n        utils.on(this.player.elements.container, 'mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen', event => {\n            const { controls } = this.player.elements;\n\n            // Remove button states for fullscreen\n            if (event.type === 'enterfullscreen') {\n                controls.pressed = false;\n                controls.hover = false;\n            }\n\n            // Show, then hide after a timeout unless another control event occurs\n            const show = [\n                'touchstart',\n                'touchmove',\n                'mousemove',\n            ].includes(event.type);\n\n            let delay = 0;\n\n            if (show) {\n                ui.toggleControls.call(this.player, true);\n                // Use longer timeout for touch devices\n                delay = this.player.touch ? 3000 : 2000;\n            }\n\n            // Clear timer\n            clearTimeout(this.player.timers.controls);\n            // Timer to prevent flicker when seeking\n            this.player.timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n        });\n    }\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.player.media, 'timeupdate seeking seeked', event => controls.timeUpdate.call(this.player, event));\n\n        // Display duration\n        utils.on(this.player.media, 'durationchange loadeddata loadedmetadata', event => controls.durationUpdate.call(this.player, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        utils.on(this.player.media, 'loadeddata', () => {\n            utils.toggleHidden(this.player.elements.volume, !this.player.hasAudio);\n            utils.toggleHidden(this.player.elements.buttons.mute, !this.player.hasAudio);\n        });\n\n        // Handle the media finishing\n        utils.on(this.player.media, 'ended', () => {\n            // Show poster on end\n            if (this.player.isHTML5 && this.player.isVideo && this.player.config.resetOnEnd) {\n                // Restart\n                this.player.restart();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.player.media, 'progress playing seeking seeked', event => controls.updateProgress.call(this.player, event));\n\n        // Handle volume changes\n        utils.on(this.player.media, 'volumechange', event => controls.updateVolume.call(this.player, event));\n\n        // Handle play/pause\n        utils.on(this.player.media, 'playing play pause ended emptied timeupdate', event => ui.checkPlaying.call(this.player, event));\n\n        // Loading state\n        utils.on(this.player.media, 'waiting canplay seeked playing', event => ui.checkLoading.call(this.player, event));\n\n        // If autoplay, then load advertisement if required\n        // TODO: Show some sort of loading state while the ad manager loads else there's a delay before ad shows\n        utils.on(this.player.media, 'playing', () => {\n            if (!this.player.ads) {\n                return;\n            }\n\n            // If ads are enabled, wait for them first\n            if (this.player.ads.enabled && !this.player.ads.initialized) {\n                // Wait for manager response\n                this.player.ads.managerPromise.then(() => this.player.ads.play()).catch(() => this.player.play());\n            }\n        });\n\n        // Click video\n        if (this.player.supported.ui && this.player.config.clickToPlay && !this.player.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this.player, `.${this.player.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!utils.is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.player.config.hideControls && this.player.touch && !this.player.paused) {\n                    return;\n                }\n\n                if (this.player.paused) {\n                    this.player.play();\n                } else if (this.player.ended) {\n                    this.player.restart();\n                    this.player.play();\n                } else {\n                    this.player.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.player.supported.ui && this.player.config.disableContextMenu) {\n            utils.on(\n                this.player.elements.wrapper,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false,\n            );\n        }\n\n        // Volume change\n        utils.on(this.player.media, 'volumechange', () => {\n            // Save to storage\n            this.player.storage.set({ volume: this.player.volume, muted: this.player.muted });\n        });\n\n        // Speed change\n        utils.on(this.player.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'speed');\n\n            // Save to storage\n            this.player.storage.set({ speed: this.player.speed });\n        });\n\n        // Quality request\n        utils.on(this.player.media, 'qualityrequested', event => {\n            // Save to storage\n            this.player.storage.set({ quality: event.detail.quality });\n        });\n\n        // Quality change\n        utils.on(this.player.media, 'qualitychange', event => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'quality', null, event.detail.quality);\n        });\n\n        // Caption language change\n        utils.on(this.player.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ language: this.player.language });\n        });\n\n        // Captions toggle\n        utils.on(this.player.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ captions: this.player.captions.active });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.player.media, this.player.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let {detail = {}} = event;\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.player.media.error;\n            }\n\n            utils.dispatchEvent.call(this.player, this.player.elements.container, event.type, true, detail);\n        });\n    }\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Run default and custom handlers\n        const proxy = (event, defaultHandler, customHandlerKey) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = utils.is.function(customHandler);\n            let returned = true;\n\n            // Execute custom handler\n            if (hasCustomHandler) {\n                returned = customHandler.call(this.player, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (returned && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this.player, event);\n            }\n        };\n\n        // Trigger custom and default handlers\n        const on = (element, type, defaultHandler, customHandlerKey, passive = true) => {\n            const customHandler = this.player.config.listeners[customHandlerKey];\n            const hasCustomHandler = utils.is.function(customHandler);\n\n            utils.on(element, type, event => proxy(event, defaultHandler, customHandlerKey), passive && !hasCustomHandler);\n        };\n\n        // Play/pause toggle\n        on(this.player.elements.buttons.play, 'click', this.player.togglePlay, 'play');\n\n        // Pause\n        on(this.player.elements.buttons.restart, 'click', this.player.restart, 'restart');\n\n        // Rewind\n        on(this.player.elements.buttons.rewind, 'click', this.player.rewind, 'rewind');\n\n        // Rewind\n        on(this.player.elements.buttons.fastForward, 'click', this.player.forward, 'fastForward');\n\n        // Mute toggle\n        on(\n            this.player.elements.buttons.mute,\n            'click',\n            () => {\n                this.player.muted = !this.player.muted;\n            },\n            'mute',\n        );\n\n        // Captions toggle\n        on(this.player.elements.buttons.captions, 'click', this.player.toggleCaptions);\n\n        // Fullscreen toggle\n        on(\n            this.player.elements.buttons.fullscreen,\n            'click',\n            () => {\n                this.player.fullscreen.toggle();\n            },\n            'fullscreen',\n        );\n\n        // Picture-in-Picture\n        on(\n            this.player.elements.buttons.pip,\n            'click',\n            () => {\n                this.player.pip = 'toggle';\n            },\n            'pip',\n        );\n\n        // Airplay\n        on(this.player.elements.buttons.airplay, 'click', this.player.airplay, 'airplay');\n\n        // Settings menu\n        on(this.player.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this.player, event);\n        });\n\n        // Settings menu\n        on(this.player.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Go back to home tab on click\n            const showHomeTab = () => {\n                const id = `plyr-settings-${this.player.id}-home`;\n                controls.showTab.call(this.player, id);\n            };\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (utils.matches(event.target, this.player.config.selectors.inputs.language)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.currentTrack = Number(event.target.value);\n                        showHomeTab();\n                    },\n                    'language',\n                );\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.quality)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.quality = event.target.value;\n                        showHomeTab();\n                    },\n                    'quality',\n                );\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.speed)) {\n                proxy(\n                    event,\n                    () => {\n                        this.player.speed = parseFloat(event.target.value);\n                        showHomeTab();\n                    },\n                    'speed',\n                );\n            } else {\n                const tab = event.target;\n                controls.showTab.call(this.player, tab.getAttribute('aria-controls'));\n            }\n        });\n\n        // Set range input alternative \"value\", which matches the tooltip time (#954)\n        on(this.player.elements.inputs.seek, 'mousedown mousemove', event => {\n            const clientRect = this.player.elements.progress.getBoundingClientRect();\n            const percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n            event.currentTarget.setAttribute('seek-value', percent);\n        });\n\n        // Pause while seeking\n        on(this.player.elements.inputs.seek, 'mousedown mouseup keydown keyup touchstart touchend', event => {\n            const seek = event.currentTarget;\n\n            const code = event.keyCode ? event.keyCode : event.which;\n            const eventType = event.type;\n\n            if ((eventType === 'keydown' || eventType === 'keyup') && (code !== 39 && code !== 37)) {\n                return;\n            }\n            // Was playing before?\n            const play = seek.hasAttribute('play-on-seeked');\n\n            // Done seeking\n            const done = [\n                'mouseup',\n                'touchend',\n                'keyup',\n            ].includes(event.type);\n\n            // If we're done seeking and it was playing, resume playback\n            if (play && done) {\n                seek.removeAttribute('play-on-seeked');\n                this.player.play();\n            } else if (!done && this.player.playing) {\n                seek.setAttribute('play-on-seeked', '');\n                this.player.pause();\n            }\n        });\n\n        // Seek\n        on(\n            this.player.elements.inputs.seek,\n            inputEvent,\n            event => {\n                const seek = event.currentTarget;\n\n                // If it exists, use seek-value instead of \"value\" for consistency with tooltip time (#954)\n                let seekTo = seek.getAttribute('seek-value');\n\n                if (utils.is.empty(seekTo)) {\n                    seekTo = seek.value;\n                }\n\n                seek.removeAttribute('seek-value');\n\n                this.player.currentTime = seekTo / seek.max * this.player.duration;\n            },\n            'seek',\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.player.config.toggleInvert && !utils.is.element(this.player.elements.display.duration)) {\n            on(this.player.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.player.currentTime === 0) {\n                    return;\n                }\n\n                this.player.config.invertTime = !this.player.config.invertTime;\n\n                controls.timeUpdate.call(this.player);\n            });\n        }\n\n        // Volume\n        on(\n            this.player.elements.inputs.volume,\n            inputEvent,\n            event => {\n                this.player.volume = event.target.value;\n            },\n            'volume',\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            on(utils.getElements.call(this.player, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this.player, event.target);\n            });\n        }\n\n        // Seek tooltip\n        on(this.player.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this.player, event));\n\n        // Update controls.hover state (used for ui.toggleControls to avoid hiding when interacting)\n        on(this.player.elements.controls, 'mouseenter mouseleave', event => {\n            this.player.elements.controls.hover = !this.player.touch && event.type === 'mouseenter';\n        });\n\n        // Update controls.pressed state (used for ui.toggleControls to avoid hiding when interacting)\n        on(this.player.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n            this.player.elements.controls.pressed = [\n                'mousedown',\n                'touchstart',\n            ].includes(event.type);\n        });\n\n        // Focus in/out on controls\n        on(this.player.elements.controls, 'focusin focusout', event => {\n            const { config, elements, timers } = this.player;\n\n            // Skip transition to prevent focus from scrolling the parent element\n            utils.toggleClass(elements.controls, config.classNames.noTransition, event.type === 'focusin');\n\n            // Toggle\n            ui.toggleControls.call(this.player, event.type === 'focusin');\n\n            // If focusin, hide again after delay\n            if (event.type === 'focusin') {\n                // Restore transition\n                setTimeout(() => {\n                    utils.toggleClass(elements.controls, config.classNames.noTransition, false);\n                }, 0);\n\n                // Delay a little more for keyboard users\n                const delay = this.touch ? 3000 : 4000;\n\n                // Clear timer\n                clearTimeout(timers.controls);\n                // Hide\n                timers.controls = setTimeout(() => ui.toggleControls.call(this.player, false), delay);\n            }\n        });\n\n        // Mouse wheel for volume\n        on(\n            this.player.elements.inputs.volume,\n            'wheel',\n            event => {\n                // Detect \"natural\" scroll - suppored on OS X Safari only\n                // Other browsers on OS X will be inverted until support improves\n                const inverted = event.webkitDirectionInvertedFromDevice;\n                const step = 1 / 50;\n                let direction = 0;\n\n                // Scroll down (or up on natural) to decrease\n                if (event.deltaY < 0 || event.deltaX > 0) {\n                    if (inverted) {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    } else {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    }\n                }\n\n                // Scroll up (or down on natural) to increase\n                if (event.deltaY > 0 || event.deltaX < 0) {\n                    if (inverted) {\n                        this.player.increaseVolume(step);\n                        direction = 1;\n                    } else {\n                        this.player.decreaseVolume(step);\n                        direction = -1;\n                    }\n                }\n\n                // Don't break page scrolling at max and min\n                if ((direction === 1 && this.player.media.volume < 1) || (direction === -1 && this.player.media.volume > 0)) {\n                    event.preventDefault();\n                }\n            },\n            'volume',\n            false,\n        );\n    }\n\n    // Reset on destroy\n    clear() {\n        this.global(false);\n    }\n}\n\nexport default Listeners;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport captions from './../captions';\nimport controls from './../controls';\nimport ui from './../ui';\nimport utils from './../utils';\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (play && !this.embed.hasPlayed) {\n        this.embed.hasPlayed = true;\n    }\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        utils.dispatchEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst vimeo = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils\n                .loadScript(this.config.urls.vimeo.sdk)\n                .then(() => {\n                    vimeo.ready.call(this);\n                })\n                .catch(error => {\n                    this.debug.warn('Vimeo API failed to load', error);\n                });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n\n        if (this.supported.ui) {\n            const height = 240;\n            const offset = (height - padding) / (height / 50);\n\n            this.media.style.transform = `translateY(-${offset}%)`;\n        }\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            // muted: player.muted,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n            playsinline: !this.config.fullscreen.iosNative,\n        };\n        const params = utils.buildUrlParams(options);\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(player.config.attributes.embed.id);\n        }\n\n        const id = utils.parseVimeoId(source);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = utils.format(player.config.urls.vimeo.iframe, id, params);\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        iframe.setAttribute('allowtransparency', '');\n        iframe.setAttribute('allow', 'autoplay');\n\n        // Inject the package\n        const wrapper = utils.createElement('div', { class: player.config.classNames.embedContainer });\n        wrapper.appendChild(iframe);\n        player.media = utils.replaceElement(wrapper, player.media);\n\n        // Get poster image\n        utils.fetch(utils.format(player.config.urls.vimeo.api, id), 'json').then(response => {\n            if (utils.is.empty(response)) {\n                return;\n            }\n\n            // Get the URL for thumbnail\n            const url = new URL(response[0].thumbnail_large);\n\n            // Get original image\n            url.pathname = `${url.pathname.split('_')[0]}.jpg`;\n\n            // Set and show poster\n            ui.setPoster.call(player, url.href);\n        });\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe, {\n            autopause: player.config.autopause,\n            muted: player.muted,\n        });\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Disable native text track rendering\n        if (player.supported.ui) {\n            player.embed.disableTextTrack();\n        }\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            assurePlaybackState.call(player, true);\n            return player.embed.play();\n        };\n\n        player.media.pause = () => {\n            assurePlaybackState.call(player, false);\n            return player.embed.pause();\n        };\n\n        player.media.stop = () => {\n            player.pause();\n            player.currentTime = 0;\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Vimeo will automatically play on seek if the video hasn't been played before\n\n                // Get current paused state and volume etc\n                const { embed, media, paused, volume } = player;\n                const restorePause = paused && !embed.hasPlayed;\n\n                // Set seeking state and trigger event\n                media.seeking = true;\n                utils.dispatchEvent.call(player, media, 'seeking');\n\n                // If paused, mute until seek is complete\n                Promise.resolve(restorePause && embed.setVolume(0))\n                    // Seek\n                    .then(() => embed.setCurrentTime(time))\n                    // Restore paused\n                    .then(() => restorePause && embed.pause())\n                    // Restore volume\n                    .then(() => restorePause && embed.setVolume(volume))\n                    .catch(() => {\n                        // Do nothing\n                    });\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed\n                    .setPlaybackRate(input)\n                    .then(() => {\n                        speed = input;\n                        utils.dispatchEvent.call(player, player.media, 'ratechange');\n                    })\n                    .catch(error => {\n                        // Hide menu item (and menu if empty)\n                        if (error.name === 'Error') {\n                            controls.setSpeedMenu.call(player, []);\n                        }\n                    });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed\n            .getVideoUrl()\n            .then(value => {\n                currentSrc = value;\n            })\n            .catch(error => {\n                this.debug.warn(error);\n            });\n\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', ({ cues = [] }) => {\n            const strippedCues = cues.map(cue => utils.stripHTML(cue.text));\n            captions.updateCues.call(player, strippedCues);\n        });\n\n        player.embed.on('loaded', () => {\n            // Assure state and events are updated on autoplay\n            player.embed.getPaused().then(paused => {\n                assurePlaybackState.call(player, !paused);\n                if (!paused) {\n                    utils.dispatchEvent.call(player, player.media, 'playing');\n                }\n            });\n\n            if (utils.is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            assurePlaybackState.call(player, true);\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            assurePlaybackState.call(player, false);\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n\n            // Get duration as if we do it before load, it gives an incorrect value\n            // https://github.com/sampotts/plyr/issues/891\n            player.embed.getDuration().then(value => {\n                if (value !== player.media.duration) {\n                    player.media.duration = value;\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n                }\n            });\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport controls from './../controls';\nimport ui from './../ui';\nimport utils from './../utils';\n\n// Standardise YouTube quality unit\nfunction mapQualityUnit(input) {\n    switch (input) {\n        case 'hd2160':\n            return 2160;\n\n        case 2160:\n            return 'hd2160';\n\n        case 'hd1440':\n            return 1440;\n\n        case 1440:\n            return 'hd1440';\n\n        case 'hd1080':\n            return 1080;\n\n        case 1080:\n            return 'hd1080';\n\n        case 'hd720':\n            return 720;\n\n        case 720:\n            return 'hd720';\n\n        case 'large':\n            return 480;\n\n        case 480:\n            return 'large';\n\n        case 'medium':\n            return 360;\n\n        case 360:\n            return 'medium';\n\n        case 'small':\n            return 240;\n\n        case 240:\n            return 'small';\n\n        default:\n            return 'default';\n    }\n}\n\nfunction mapQualityUnits(levels) {\n    if (utils.is.empty(levels)) {\n        return levels;\n    }\n\n    return utils.dedupe(levels.map(level => mapQualityUnit(level)));\n}\n\n// Set playback state and trigger change (only on actual change)\nfunction assurePlaybackState(play) {\n    if (play && !this.embed.hasPlayed) {\n        this.embed.hasPlayed = true;\n    }\n    if (this.media.paused === play) {\n        this.media.paused = !play;\n        utils.dispatchEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n}\n\nconst youtube = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Setup API\n        if (utils.is.object(window.YT) && utils.is.function(window.YT.Player)) {\n            youtube.ready.call(this);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.sdk).catch(error => {\n                this.debug.warn('YouTube API failed to load', error);\n            });\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle(videoId) {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (utils.is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (utils.is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        if (utils.is.string(key) && !utils.is.empty(key)) {\n            const url = utils.format(this.config.urls.youtube.api, videoId, key);\n\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready() {\n        const player = this;\n\n        // Ignore already setup (race condition)\n        const currentId = player.media.getAttribute('id');\n        if (!utils.is.empty(currentId) && currentId.startsWith('youtube-')) {\n            return;\n        }\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        // Replace the <iframe> with a <div> due to YouTube API issues\n        const videoId = utils.parseYouTubeId(source);\n        const id = utils.generateId(player.provider);\n        const container = utils.createElement('div', { id });\n        player.media = utils.replaceElement(container, player.media);\n\n        // Set poster image\n        const posterSrc = format => `https://img.youtube.com/vi/${videoId}/${format}default.jpg`;\n\n        // Check thumbnail images in order of quality, but reject fallback thumbnails (120px wide)\n        utils.loadImage(posterSrc('maxres'), 121) // Higest quality and unpadded\n            .catch(() => utils.loadImage(posterSrc('sd'), 121)) // 480p padded 4:3\n            .catch(() => utils.loadImage(posterSrc('hq'))) // 360p padded 4:3. Always exists\n            .then(image => ui.setPoster.call(player, image.src))\n            .then(posterSrc => {\n                // If the image is padded, use background-size \"cover\" instead (like youtube does too with their posters)\n                if (!posterSrc.includes('maxres')) {\n                    player.elements.poster.style.backgroundSize = 'cover';\n                }\n            });\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                // origin: window ? `${window.location.protocol}//${window.location.host}` : null,\n                widget_referrer: window ? window.location.href : null,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: player.captions.active ? 1 : 0,\n                cc_lang_pref: player.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange() {\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange', false, {\n                        quality: player.media.quality,\n                    });\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player, videoId);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        assurePlaybackState.call(player, true);\n                        instance.playVideo();\n                    };\n\n                    player.media.pause = () => {\n                        assurePlaybackState.call(player, false);\n                        instance.pauseVideo();\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // If paused, mute audio preventively (YouTube starts playing on seek if the video hasn't been played yet).\n                            if (player.paused) {\n                                player.embed.mute();\n                            }\n\n                            // Set seeking state and trigger event\n                            player.media.seeking = true;\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return mapQualityUnit(instance.getPlaybackQuality());\n                        },\n                        set(input) {\n                            const quality = input;\n\n                            // Set via API\n                            instance.setPlaybackQuality(mapQualityUnit(quality));\n\n                            // Trigger request event\n                            utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                                quality,\n                            });\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    clearInterval(player.timers.playing);\n\n                    const seeked = player.media.seeking && [\n                        1,\n                        2,\n                    ].includes(event.data);\n\n                    if (seeked) {\n                        // Unset seeking and fire seeked event\n                        player.media.seeking = false;\n                        utils.dispatchEvent.call(player, player.media, 'seeked');\n                    }\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case -1:\n                            // Update scrubber\n                            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n\n                            // Get loaded % from YouTube\n                            player.media.buffered = instance.getVideoLoadedFraction();\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n\n                            break;\n\n                        case 0:\n                            assurePlaybackState.call(player, false);\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // Restore paused state (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (player.media.paused && !player.embed.hasPlayed) {\n                                player.media.pause();\n                            } else {\n                                assurePlaybackState.call(player, true);\n\n                                utils.dispatchEvent.call(player, player.media, 'playing');\n\n                                // Poll to get playback progress\n                                player.timers.playing = setInterval(() => {\n                                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                                }, 50);\n\n                                // Check duration again due to YouTube bug\n                                // https://github.com/sampotts/plyr/issues/374\n                                // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                                if (player.media.duration !== instance.getDuration()) {\n                                    player.media.duration = instance.getDuration();\n                                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n                                }\n\n                                // Get quality\n                                controls.setQualityMenu.call(player, mapQualityUnits(instance.getAvailableQualityLevels()));\n                            }\n\n                            break;\n\n                        case 2:\n                            // Restore audio (YouTube starts playing on seek if the video hasn't been played yet)\n                            if (!player.muted) {\n                                player.embed.unMute();\n                            }\n                            assurePlaybackState.call(player, false);\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport html5 from './html5';\nimport vimeo from './plugins/vimeo';\nimport youtube from './plugins/youtube';\nimport utils from './utils';\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        utils.toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n\n            // Faux poster container\n            this.elements.poster = utils.createElement('div', {\n                class: this.config.classNames.poster,\n            });\n\n            this.elements.wrapper.appendChild(this.elements.poster);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            html5.extend.call(this);\n        }\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Advertisement plugin using Google IMA HTML5 SDK\n// Create an account with our ad partner, vi here:\n// https://www.vi.ai/publisher-video-monetization/\n// ==========================================================================\n\n/* global google */\n\nimport i18n from '../i18n';\nimport utils from '../utils';\n\nclass Ads {\n    /**\n     * Ads constructor.\n     * @param {object} player\n     * @return {Ads}\n     */\n    constructor(player) {\n        this.player = player;\n        this.publisherId = player.config.ads.publisherId;\n        this.playing = false;\n        this.initialized = false;\n        this.elements = {\n            container: null,\n            displayContainer: null,\n        };\n        this.manager = null;\n        this.loader = null;\n        this.cuePoints = null;\n        this.events = {};\n        this.safetyTimer = null;\n        this.countdownTimer = null;\n\n        // Setup a promise to resolve when the IMA manager is ready\n        this.managerPromise = new Promise((resolve, reject) => {\n            // The ad is loaded and ready\n            this.on('loaded', resolve);\n\n            // Ads failed\n            this.on('error', reject);\n        });\n\n        this.load();\n    }\n\n    get enabled() {\n        return this.player.isVideo && this.player.config.ads.enabled && !utils.is.empty(this.publisherId);\n    }\n\n    /**\n     * Load the IMA SDK\n     */\n    load() {\n        if (this.enabled) {\n            // Check if the Google IMA3 SDK is loaded or load it ourselves\n            if (!utils.is.object(window.google) || !utils.is.object(window.google.ima)) {\n                utils\n                    .loadScript(this.player.config.urls.googleIMA.sdk)\n                    .then(() => {\n                        this.ready();\n                    })\n                    .catch(() => {\n                        // Script failed to load or is blocked\n                        this.trigger('error', new Error('Google IMA SDK failed to load'));\n                    });\n            } else {\n                this.ready();\n            }\n        }\n    }\n\n    /**\n     * Get the ads instance ready\n     */\n    ready() {\n        // Start ticking our safety timer. If the whole advertisement\n        // thing doesn't resolve within our set time; we bail\n        this.startSafetyTimer(12000, 'ready()');\n\n        // Clear the safety timer\n        this.managerPromise.then(() => {\n            this.clearSafetyTimer('onAdsManagerLoaded()');\n        });\n\n        // Set listeners on the Plyr instance\n        this.listeners();\n\n        // Setup the IMA SDK\n        this.setupIMA();\n    }\n\n    // Build the default tag URL\n    get tagUrl() {\n        const params = {\n            AV_PUBLISHERID: '58c25bb0073ef448b1087ad6',\n            AV_CHANNELID: '5a0458dc28a06145e4519d21',\n            AV_URL: location.hostname,\n            cb: Date.now(),\n            AV_WIDTH: 640,\n            AV_HEIGHT: 480,\n            AV_CDIM2: this.publisherId,\n        };\n\n        const base = 'https://go.aniview.com/api/adserver6/vast/';\n\n        return `${base}?${utils.buildUrlParams(params)}`;\n    }\n\n    /**\n     * In order for the SDK to display ads for our video, we need to tell it where to put them,\n     * so here we define our ad container. This div is set up to render on top of the video player.\n     * Using the code below, we tell the SDK to render ads within that div. We also provide a\n     * handle to the content video player - the SDK will poll the current time of our player to\n     * properly place mid-rolls. After we create the ad display container, we initialize it. On\n     * mobile devices, this initialization is done as the result of a user action.\n     */\n    setupIMA() {\n        // Create the container for our advertisements\n        this.elements.container = utils.createElement('div', {\n            class: this.player.config.classNames.ads,\n        });\n        this.player.elements.container.appendChild(this.elements.container);\n\n        // So we can run VPAID2\n        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);\n\n        // Set language\n        google.ima.settings.setLocale(this.player.config.ads.language);\n\n        // We assume the adContainer is the video container of the plyr element\n        // that will house the ads\n        this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container);\n\n        // Request video ads to be pre-loaded\n        this.requestAds();\n    }\n\n    /**\n     * Request advertisements\n     */\n    requestAds() {\n        const { container } = this.player.elements;\n\n        try {\n            // Create ads loader\n            this.loader = new google.ima.AdsLoader(this.elements.displayContainer);\n\n            // Listen and respond to ads loaded and error events\n            this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, event => this.onAdsManagerLoaded(event), false);\n            this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error), false);\n\n            // Request video ads\n            const request = new google.ima.AdsRequest();\n            request.adTagUrl = this.tagUrl;\n\n            // Specify the linear and nonlinear slot sizes. This helps the SDK\n            // to select the correct creative if multiple are returned\n            request.linearAdSlotWidth = container.offsetWidth;\n            request.linearAdSlotHeight = container.offsetHeight;\n            request.nonLinearAdSlotWidth = container.offsetWidth;\n            request.nonLinearAdSlotHeight = container.offsetHeight;\n\n            // We only overlay ads as we only support video.\n            request.forceNonLinearFullSlot = false;\n\n            // Mute based on current state\n            request.setAdWillPlayMuted(!this.player.muted);\n\n            this.loader.requestAds(request);\n        } catch (e) {\n            this.onAdError(e);\n        }\n    }\n\n    /**\n     * Update the ad countdown\n     * @param {boolean} start\n     */\n    pollCountdown(start = false) {\n        if (!start) {\n            clearInterval(this.countdownTimer);\n            this.elements.container.removeAttribute('data-badge-text');\n            return;\n        }\n\n        const update = () => {\n            const time = utils.formatTime(Math.max(this.manager.getRemainingTime(), 0));\n            const label = `${i18n.get('advertisement', this.player.config)} - ${time}`;\n            this.elements.container.setAttribute('data-badge-text', label);\n        };\n\n        this.countdownTimer = setInterval(update, 100);\n    }\n\n    /**\n     * This method is called whenever the ads are ready inside the AdDisplayContainer\n     * @param {Event} adsManagerLoadedEvent\n     */\n    onAdsManagerLoaded(event) {\n        // Get the ads manager\n        const settings = new google.ima.AdsRenderingSettings();\n\n        // Tell the SDK to save and restore content video state on our behalf\n        settings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n        settings.enablePreloading = true;\n\n        // The SDK is polling currentTime on the contentPlayback. And needs a duration\n        // so it can determine when to start the mid- and post-roll\n        this.manager = event.getAdsManager(this.player, settings);\n\n        // Get the cue points for any mid-rolls by filtering out the pre- and post-roll\n        this.cuePoints = this.manager.getCuePoints();\n\n        // Add advertisement cue's within the time line if available\n        if (!utils.is.empty(this.cuePoints)) {\n            this.cuePoints.forEach(cuePoint => {\n                if (cuePoint !== 0 && cuePoint !== -1 && cuePoint < this.player.duration) {\n                    const seekElement = this.player.elements.progress;\n\n                    if (utils.is.element(seekElement)) {\n                        const cuePercentage = 100 / this.player.duration * cuePoint;\n                        const cue = utils.createElement('span', {\n                            class: this.player.config.classNames.cues,\n                        });\n\n                        cue.style.left = `${cuePercentage.toString()}%`;\n                        seekElement.appendChild(cue);\n                    }\n                }\n            });\n        }\n\n        // Get skippable state\n        // TODO: Skip button\n        // this.player.debug.warn(this.manager.getAdSkippableState());\n\n        // Set volume to match player\n        this.manager.setVolume(this.player.volume);\n\n        // Add listeners to the required events\n        // Advertisement error events\n        this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error));\n\n        // Advertisement regular events\n        Object.keys(google.ima.AdEvent.Type).forEach(type => {\n            this.manager.addEventListener(google.ima.AdEvent.Type[type], event => this.onAdEvent(event));\n        });\n\n        // Resolve our adsManager\n        this.trigger('loaded');\n    }\n\n    /**\n     * This is where all the event handling takes place. Retrieve the ad from the event. Some\n     * events (e.g. ALL_ADS_COMPLETED) don't have the ad object associated\n     * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type\n     * @param {Event} event\n     */\n    onAdEvent(event) {\n        const { container } = this.player.elements;\n\n        // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)\n        // don't have ad object associated\n        const ad = event.getAd();\n\n        // Proxy event\n        const dispatchEvent = type => {\n            const event = `ads${type.replace(/_/g, '').toLowerCase()}`;\n            utils.dispatchEvent.call(this.player, this.player.media, event);\n        };\n\n        switch (event.type) {\n            case google.ima.AdEvent.Type.LOADED:\n                // This is the first event sent for an ad - it is possible to determine whether the\n                // ad is a video ad or an overlay\n                this.trigger('loaded');\n\n                // Bubble event\n                dispatchEvent(event.type);\n\n                // Start countdown\n                this.pollCountdown(true);\n\n                if (!ad.isLinear()) {\n                    // Position AdDisplayContainer correctly for overlay\n                    ad.width = container.offsetWidth;\n                    ad.height = container.offsetHeight;\n                }\n\n                // console.info('Ad type: ' + event.getAd().getAdPodInfo().getPodIndex());\n                // console.info('Ad time: ' + event.getAd().getAdPodInfo().getTimeOffset());\n                break;\n\n            case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n                // All ads for the current videos are done. We can now request new advertisements\n                // in case the video is re-played\n\n                // Fire event\n                dispatchEvent(event.type);\n\n                // TODO: Example for what happens when a next video in a playlist would be loaded.\n                // So here we load a new video when all ads are done.\n                // Then we load new ads within a new adsManager. When the video\n                // Is started - after - the ads are loaded, then we get ads.\n                // You can also easily test cancelling and reloading by running\n                // player.ads.cancel() and player.ads.play from the console I guess.\n                // this.player.source = {\n                //     type: 'video',\n                //     title: 'View From A Blue Moon',\n                //     sources: [{\n                //         src:\n                // '/_Resources/Static/Packages/Jonnitto.Plyr/demo/View_From_A_Blue_Moon_Trailer-HD.mp4', type:\n                // 'video/mp4', }], poster:\n                // '/_Resources/Static/Packages/Jonnitto.Plyr/demo/View_From_A_Blue_Moon_Trailer-HD.jpg', tracks:\n                // [ { kind: 'captions', label: 'English', srclang: 'en', src:\n                // '/_Resources/Static/Packages/Jonnitto.Plyr/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt',\n                // default: true, }, { kind: 'captions', label: 'French', srclang: 'fr', src:\n                // '/_Resources/Static/Packages/Jonnitto.Plyr/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', }, ],\n                // };\n\n                // TODO: So there is still this thing where a video should only be allowed to start\n                // playing when the IMA SDK is ready or has failed\n\n                this.loadAds();\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n                // This event indicates the ad has started - the video player can adjust the UI,\n                // for example display a pause button and remaining time. Fired when content should\n                // be paused. This usually happens right before an ad is about to cover the content\n\n                dispatchEvent(event.type);\n\n                this.pauseContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n                // This event indicates the ad has finished - the video player can perform\n                // appropriate UI actions, such as removing the timer for remaining time detection.\n                // Fired when content should be resumed. This usually happens when an ad finishes\n                // or collapses\n\n                dispatchEvent(event.type);\n\n                this.pollCountdown();\n\n                this.resumeContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.STARTED:\n            case google.ima.AdEvent.Type.MIDPOINT:\n            case google.ima.AdEvent.Type.COMPLETE:\n            case google.ima.AdEvent.Type.IMPRESSION:\n            case google.ima.AdEvent.Type.CLICK:\n                dispatchEvent(event.type);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Any ad error handling comes through here\n     * @param {Event} event\n     */\n    onAdError(event) {\n        this.cancel();\n        this.player.debug.warn('Ads error', event);\n    }\n\n    /**\n     * Setup hooks for Plyr and window events. This ensures\n     * the mid- and post-roll launch at the correct time. And\n     * resize the advertisement when the player resizes\n     */\n    listeners() {\n        const { container } = this.player.elements;\n        let time;\n\n        // Add listeners to the required events\n        this.player.on('ended', () => {\n            this.loader.contentComplete();\n        });\n\n        this.player.on('seeking', () => {\n            time = this.player.currentTime;\n            return time;\n        });\n\n        this.player.on('seeked', () => {\n            const seekedTime = this.player.currentTime;\n\n            if (utils.is.empty(this.cuePoints)) {\n                return;\n            }\n\n            this.cuePoints.forEach((cuePoint, index) => {\n                if (time < cuePoint && cuePoint < seekedTime) {\n                    this.manager.discardAdBreak();\n                    this.cuePoints.splice(index, 1);\n                }\n            });\n        });\n\n        // Listen to the resizing of the window. And resize ad accordingly\n        // TODO: eventually implement ResizeObserver\n        window.addEventListener('resize', () => {\n            if (this.manager) {\n                this.manager.resize(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n            }\n        });\n    }\n\n    /**\n     * Initialize the adsManager and start playing advertisements\n     */\n    play() {\n        const { container } = this.player.elements;\n\n        if (!this.managerPromise) {\n            this.resumeContent();\n        }\n\n        // Play the requested advertisement whenever the adsManager is ready\n        this.managerPromise\n            .then(() => {\n                // Initialize the container. Must be done via a user action on mobile devices\n                this.elements.displayContainer.initialize();\n\n                try {\n                    if (!this.initialized) {\n                        // Initialize the ads manager. Ad rules playlist will start at this time\n                        this.manager.init(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n\n                        // Call play to start showing the ad. Single video and overlay ads will\n                        // start at this time; the call will be ignored for ad rules\n                        this.manager.start();\n                    }\n\n                    this.initialized = true;\n                } catch (adError) {\n                    // An error may be thrown if there was a problem with the\n                    // VAST response\n                    this.onAdError(adError);\n                }\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Resume our video\n     */\n    resumeContent() {\n        // Hide the advertisement container\n        this.elements.container.style.zIndex = '';\n\n        // Ad is stopped\n        this.playing = false;\n\n        // Play our video\n        if (this.player.currentTime < this.player.duration) {\n            this.player.play();\n        }\n    }\n\n    /**\n     * Pause our video\n     */\n    pauseContent() {\n        // Show the advertisement container\n        this.elements.container.style.zIndex = 3;\n\n        // Ad is playing.\n        this.playing = true;\n\n        // Pause our video.\n        this.player.pause();\n    }\n\n    /**\n     * Destroy the adsManager so we can grab new ads after this. If we don't then we're not\n     * allowed to call new ads based on google policies, as they interpret this as an accidental\n     * video requests. https://developers.google.com/interactive-\n     * media-ads/docs/sdks/android/faq#8\n     */\n    cancel() {\n        // Pause our video\n        if (this.initialized) {\n            this.resumeContent();\n        }\n\n        // Tell our instance that we're done for now\n        this.trigger('error');\n\n        // Re-create our adsManager\n        this.loadAds();\n    }\n\n    /**\n     * Re-create our adsManager\n     */\n    loadAds() {\n        // Tell our adsManager to go bye bye\n        this.managerPromise\n            .then(() => {\n                // Destroy our adsManager\n                if (this.manager) {\n                    this.manager.destroy();\n                }\n\n                // Re-set our adsManager promises\n                this.managerPromise = new Promise(resolve => {\n                    this.on('loaded', resolve);\n                    this.player.debug.log(this.manager);\n                });\n\n                // Now request some new advertisements\n                this.requestAds();\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Handles callbacks after an ad event was invoked\n     * @param {string} event - Event type\n     */\n    trigger(event, ...args) {\n        const handlers = this.events[event];\n\n        if (utils.is.array(handlers)) {\n            handlers.forEach(handler => {\n                if (utils.is.function(handler)) {\n                    handler.apply(this, args);\n                }\n            });\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     * @return {Ads}\n     */\n    on(event, callback) {\n        if (!utils.is.array(this.events[event])) {\n            this.events[event] = [];\n        }\n\n        this.events[event].push(callback);\n\n        return this;\n    }\n\n    /**\n     * Setup a safety timer for when the ad network doesn't respond for whatever reason.\n     * The advertisement has 12 seconds to get its things together. We stop this timer when the\n     * advertisement is playing, or when a user action is required to start, then we clear the\n     * timer on ad ready\n     * @param {number} time\n     * @param {string} from\n     */\n    startSafetyTimer(time, from) {\n        this.player.debug.log(`Safety timer invoked from: ${from}`);\n\n        this.safetyTimer = setTimeout(() => {\n            this.cancel();\n            this.clearSafetyTimer('startSafetyTimer()');\n        }, time);\n    }\n\n    /**\n     * Clear our safety timer(s)\n     * @param {string} from\n     */\n    clearSafetyTimer(from) {\n        if (!utils.is.nullOrUndefined(this.safetyTimer)) {\n            this.player.debug.log(`Safety timer cleared from: ${from}`);\n\n            clearTimeout(this.safetyTimer);\n            this.safetyTimer = null;\n        }\n    }\n}\n\nexport default Ads;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport html5 from './html5';\nimport media from './media';\nimport support from './support';\nimport { providers } from './types';\nimport ui from './ui';\nimport utils from './utils';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        html5.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // Reset quality options\n                this.options.quality = [];\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !utils.is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = utils.createElement('div', {\n                            src: input.sources[0].src,\n                        });\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if (!utils.is.empty(input.poster)) {\n                        this.poster = input.poster;\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.playsinline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n\n                // Update the fullscreen support\n                this.fullscreen.update();\n            },\n            true,\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.3.12\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport captions from './captions';\nimport Console from './console';\nimport controls from './controls';\nimport defaults from './defaults';\nimport Fullscreen from './fullscreen';\nimport Listeners from './listeners';\nimport media from './media';\nimport Ads from './plugins/ads';\nimport source from './source';\nimport Storage from './storage';\nimport support from './support';\nimport { providers, types } from './types';\nimport ui from './ui';\nimport utils from './utils';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n\n        // State\n        this.ready = false;\n        this.loading = false;\n        this.failed = false;\n\n        // Touch device\n        this.touch = support.touch;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || utils.is.nodeList(this.media) || utils.is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            Plyr.defaults,\n            options || {},\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })(),\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: -1,\n            meta: new WeakMap(),\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this.config.debug);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (utils.is.nullOrUndefined(this.media) || !utils.is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        const clone = this.media.cloneNode(true);\n        clone.autoplay = false;\n        this.elements.original = clone;\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed properties\n        let iframe = null;\n        let url = null;\n        let params = null;\n\n        // Different setup based on type\n        switch (type) {\n            case 'div':\n                // Find the frame\n                iframe = this.media.querySelector('iframe');\n\n                // <iframe> type\n                if (utils.is.element(iframe)) {\n                    // Detect provider\n                    url = iframe.getAttribute('src');\n                    this.provider = utils.getProviderByUrl(url);\n\n                    // Rework elements\n                    this.elements.container = this.media;\n                    this.media = iframe;\n\n                    // Reset classname\n                    this.elements.container.className = '';\n\n                    // Get attributes from URL and set config\n                    params = utils.getUrlParams(url);\n                    if (!utils.is.empty(params)) {\n                        const truthy = [\n                            '1',\n                            'true',\n                        ];\n\n                        if (truthy.includes(params.autoplay)) {\n                            this.config.autoplay = true;\n                        }\n                        if (truthy.includes(params.loop)) {\n                            this.config.loop.active = true;\n                        }\n\n                        // TODO: replace fullscreen.iosNative with this playsinline config option\n                        // YouTube requires the playsinline in the URL\n                        if (this.isYouTube) {\n                            this.config.playsinline = truthy.includes(params.playsinline);\n                        } else {\n                            this.config.playsinline = true;\n                        }\n                    }\n                } else {\n                    // <div> with attributes\n                    this.provider = this.media.getAttribute(this.config.attributes.embed.provider);\n\n                    // Remove attribute\n                    this.media.removeAttribute(this.config.attributes.embed.provider);\n                }\n\n                // Unsupported or missing provider\n                if (utils.is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Audio will come later for external providers\n                this.type = types.video;\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                // Get config from attributes\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.playsinline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.playsinline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Create listeners\n        this.listeners = new Listeners(this);\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        if (!utils.is.element(this.elements.container)) {\n            this.elements.container = utils.createElement('div');\n            utils.wrap(this.media, this.elements.container);\n        }\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n\n        // Container listeners\n        this.listeners.container();\n\n        // Global listeners\n        this.listeners.global();\n\n        // Setup fullscreen\n        this.fullscreen = new Fullscreen(this);\n\n        // Setup ads if provided\n        this.ads = new Ads(this);\n\n        // Autoplay if required\n        if (this.config.autoplay) {\n            this.play();\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return Boolean(this.provider === providers.html5);\n    }\n    get isEmbed() {\n        return Boolean(this.isYouTube || this.isVimeo);\n    }\n    get isYouTube() {\n        return Boolean(this.provider === providers.youtube);\n    }\n    get isVimeo() {\n        return Boolean(this.provider === providers.vimeo);\n    }\n    get isVideo() {\n        return Boolean(this.type === types.video);\n    }\n    get isAudio() {\n        return Boolean(this.type === types.audio);\n    }\n\n    /**\n     * Play the media, or play the advertisement (if they are not blocked)\n     */\n    play() {\n        if (!utils.is.function(this.media.play)) {\n            return null;\n        }\n\n        // Return the promise (for HTML5)\n        return this.media.play();\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing || !utils.is.function(this.media.pause)) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return Boolean(this.ready && !this.paused && !this.ended);\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return Boolean(this.media.paused);\n    }\n\n    /**\n     * Get stopped state\n     */\n    get stopped() {\n        return Boolean(this.paused && this.currentTime === 0);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return Boolean(this.media.ended);\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = utils.is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        if (this.isHTML5) {\n            this.pause();\n            this.restart();\n        } else if (utils.is.function(this.media.stop)) {\n            this.media.stop();\n        }\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        // Bail if media duration isn't available yet\n        if (!this.duration) {\n            return;\n        }\n\n        // Validate input\n        const inputIsValid = utils.is.number(input) && input > 0;\n\n        // Set\n        this.media.currentTime = inputIsValid ? Math.min(input, this.duration) : 0;\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get buffered\n     */\n    get buffered() {\n        const { buffered } = this.media;\n\n        // YouTube / Vimeo return a float between 0-1\n        if (utils.is.number(buffered)) {\n            return buffered;\n        }\n\n        // HTML5\n        // TODO: Handle buffered chunks of the media\n        // (i.e. seek to another section buffers only that section)\n        if (buffered && buffered.length && this.duration > 0) {\n            return buffered.end(0) / this.duration;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return Boolean(this.media.seeking);\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseFloat(this.config.duration);\n\n        // Media duration can be NaN before the media has loaded\n        const duration = (this.media || {}).duration || 0;\n\n        // If config duration is funky, use regular duration\n        return fauxDuration || duration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume manually, reset muted state\n        if (!utils.is.empty(value) && this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return Number(this.media.volume);\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return Boolean(this.media.muted);\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        if (this.isAudio) {\n            return true;\n        }\n\n        // Get audio tracks\n        return (\n            Boolean(this.media.mozHasAudio) ||\n            Boolean(this.media.webkitAudioDecodedByteCount) ||\n            Boolean(this.media.audioTracks && this.media.audioTracks.length)\n        );\n    }\n\n    /**\n     * Set playback speed\n     * @param {number} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return Number(this.media.playbackRate);\n    }\n\n    /**\n     * Set playback quality\n     * Currently HTML5 & YouTube only\n     * @param {number} input - Quality level\n     */\n    set quality(input) {\n        let quality = null;\n\n        if (!utils.is.empty(input)) {\n            quality = Number(input);\n        }\n\n        if (!utils.is.number(quality)) {\n            quality = this.storage.get('quality');\n        }\n\n        if (!utils.is.number(quality)) {\n            quality = this.config.quality.selected;\n        }\n\n        if (!utils.is.number(quality)) {\n            quality = this.config.quality.default;\n        }\n\n        if (!this.options.quality.length) {\n            return;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            const closest = utils.closest(this.options.quality, quality);\n            this.debug.warn(`Unsupported quality option: ${quality}, using ${closest} instead`);\n            quality = closest;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return Boolean(this.media.loop);\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isVideo) {\n            this.debug.warn('Poster can only be set for video');\n            return;\n        }\n\n        ui.setPoster.call(this, input);\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return Boolean(this.config.autoplay);\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const active = utils.is.boolean(input) ? input : !this.elements.container.classList.contains(this.config.classNames.captions.active);\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, active);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, active);\n\n        // Update state and trigger event\n        if (active !== this.captions.active) {\n            this.captions.active = active;\n            utils.dispatchEvent.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n        }\n    }\n\n    /**\n     * Set the caption track by index\n     * @param {number} - Caption index\n     */\n    set currentTrack(input) {\n        captions.set.call(this, input);\n    }\n\n    /**\n     * Get the current caption track index (-1 if disabled)\n     */\n    get currentTrack() {\n        const { active, currentTrack } = this.captions;\n        return active ? currentTrack : -1;\n    }\n\n    /**\n     * Set the wanted language for captions\n     * Since tracks can be added later it won't update the actual caption track until there is a matching track\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        captions.setLanguage.call(this, input);\n    }\n\n    /**\n     * Get the current track's language\n     */\n    get language() {\n        return (captions.getCurrentTrack.call(this) || {}).language;\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} [toggle] - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // Don't toggle if missing UI support or if it's audio\n        if (this.supported.ui && !this.isAudio) {\n            // Get state before change\n            const isHidden = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n\n            // Negate the argument if not undefined since adding the class to hides the controls\n            const force = typeof toggle === 'undefined' ? undefined : !toggle;\n\n            // Apply and get updated state\n            const hiding = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, force);\n\n            // Close menu\n            if (hiding && this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                controls.toggleMenu.call(this, false);\n            }\n            // Trigger event on change\n            if (hiding !== isHidden) {\n                const eventName = hiding ? 'controlshidden' : 'controlsshown';\n                utils.dispatchEvent.call(this, this.media, eventName);\n            }\n            return !hiding;\n        }\n        return false;\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n    }\n\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        if (!this.ready) {\n            return;\n        }\n\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove elements\n                    utils.removeElement(this.elements.buttons.play);\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Unbind listeners\n                this.listeners.clear();\n\n                // Replace the container with the original element provided\n                utils.replaceElement(this.elements.original, this.elements.container);\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Reset state\n                this.ready = false;\n\n                // Clear for garbage collection\n                setTimeout(() => {\n                    this.elements = null;\n                    this.media = null;\n                }, 200);\n            }\n        };\n\n        // Stop playback\n        this.stop();\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Clear timeout\n                clearTimeout(this.timers.loading);\n\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                clearInterval(this.timers.buffering);\n                clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                if (this.embed !== null && utils.is.function(this.embed.destroy)) {\n                    this.embed.destroy();\n                }\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                if (this.embed !== null) {\n                    this.embed.unload().then(done);\n                }\n\n                // Vimeo does not always return\n                setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return utils.loadSprite(url, id);\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {*} selector\n     * @param {object} options\n     */\n    static setup(selector, options = {}) {\n        let targets = null;\n\n        if (utils.is.string(selector)) {\n            targets = Array.from(document.querySelectorAll(selector));\n        } else if (utils.is.nodeList(selector)) {\n            targets = Array.from(selector);\n        } else if (utils.is.array(selector)) {\n            targets = selector.filter(utils.is.element);\n        }\n\n        if (utils.is.empty(targets)) {\n            return null;\n        }\n\n        return targets.map(t => new Plyr(t, options));\n    }\n}\n\nPlyr.defaults = utils.cloneDeep(defaults);\n\nexport default Plyr;\n"]}